import { z } from '@openai/zod/v3';
// -----------------------------------------------------
// Status enums
// -----------------------------------------------------
export const WebSearchStatus = z
    .enum(['in_progress', 'completed', 'searching', 'failed'])
    .default('failed');
export const FileSearchStatus = z
    .enum(['in_progress', 'completed', 'searching', 'failed', 'incomplete'])
    .default('failed');
export const CodeInterpreterStatus = z
    .enum(['in_progress', 'completed', 'interpreting'])
    .default('in_progress');
export const ImageGenerationStatus = z
    .enum(['in_progress', 'completed', 'generating', 'failed'])
    .default('failed');
/**
 * Adds web search abilities to your agent
 * @param options Additional configuration for the web search like specifying the location of your agent
 * @returns a web search tool definition
 */
export function webSearchTool(options = {}) {
    return {
        type: 'hosted_tool',
        name: options.name ?? 'web_search_preview',
        providerData: {
            type: 'web_search',
            name: options.name ?? 'web_search_preview',
            userLocation: options.userLocation,
            searchContextSize: options.searchContextSize ?? 'medium',
        },
    };
}
/**
 * Adds file search abilities to your agent
 * @param vectorStoreIds The IDs of the vector stores to search.
 * @param options Additional configuration for the file search like specifying the maximum number of results to return.
 * @returns a file search tool definition
 */
export function fileSearchTool(vectorStoreIds, options = {}) {
    const vectorIds = Array.isArray(vectorStoreIds)
        ? vectorStoreIds
        : [vectorStoreIds];
    return {
        type: 'hosted_tool',
        name: options.name ?? 'file_search',
        providerData: {
            type: 'file_search',
            name: options.name ?? 'file_search',
            vectorStoreId: vectorIds,
            maxNumResults: options.maxNumResults,
            includeSearchResults: options.includeSearchResults,
            rankingOptions: options.rankingOptions,
            filters: options.filters,
        },
    };
}
/**
 * Adds code interpreter abilities to your agent
 * @param options Additional configuration for the code interpreter
 * @returns a code interpreter tool definition
 */
export function codeInterpreterTool(options = {}) {
    return {
        type: 'hosted_tool',
        name: options.name ?? 'code_interpreter',
        providerData: {
            type: 'code_interpreter',
            name: options.name ?? 'code_interpreter',
            container: options.container,
        },
    };
}
/**
 * Adds image generation abilities to your agent
 * @param options Additional configuration for the image generation
 * @returns an image generation tool definition
 */
export function imageGenerationTool(options = {}) {
    return {
        type: 'hosted_tool',
        name: options.name ?? 'image_generation',
        providerData: {
            type: 'image_generation',
            name: options.name ?? 'image_generation',
            background: options.background,
            inputImageMask: options.inputImageMask,
            model: options.model,
            moderation: options.moderation,
            outputCompression: options.outputCompression,
            outputFormat: options.outputFormat,
            partialImages: options.partialImages,
            quality: options.quality,
            size: options.size,
        },
    };
}
//# sourceMappingURL=tools.js.map