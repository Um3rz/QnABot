var Ta = Object.defineProperty;
var Pr = (n) => {
  throw TypeError(n);
};
var Ia = (n, e, t) => e in n ? Ta(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var _ = (n, e, t) => Ia(n, typeof e != "symbol" ? e + "" : e, t), Fn = (n, e, t) => e.has(n) || Pr("Cannot " + t);
var u = (n, e, t) => (Fn(n, e, "read from private field"), t ? t.call(n) : e.get(n)), b = (n, e, t) => e.has(n) ? Pr("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(n) : e.set(n, t), y = (n, e, t, r) => (Fn(n, e, "write to private field"), r ? r.call(n, t) : e.set(n, t), t), j = (n, e, t) => (Fn(n, e, "access private method"), t);
const Hn = {
  version: "0.0.4"
};
function Is(n) {
  const e = atob(n), t = e.length, r = new Uint8Array(t);
  for (let s = 0; s < t; s++)
    r[s] = e.charCodeAt(s);
  return r.buffer;
}
function As(n) {
  const e = String.fromCharCode(...new Uint8Array(n));
  return btoa(e);
}
function Cs(n) {
  if (typeof n > "u" || n === null || typeof n != "object" || !("type" in n) || typeof n.type != "string" || !n.type || n.type !== "message" || !("content" in n) || !Array.isArray(n.content) || n.content.length < 1)
    return;
  const e = n.content[n.content.length - 1];
  if (!(!("type" in e) || typeof e.type != "string")) {
    if (e.type === "text")
      return typeof e.text == "string" ? e.text : void 0;
    if (e.type === "audio")
      return typeof e.transcript == "string" ? e.transcript : void 0;
  }
}
function Aa(n, e) {
  const t = n.filter((a) => !e.some((i) => i.itemId === a.itemId)), r = e.filter((a) => !n.some((i) => i.itemId === a.itemId)), s = e.filter((a) => n.some((i) => i.itemId === a.itemId && JSON.stringify(i) !== JSON.stringify(a)));
  return {
    removals: t,
    additions: r,
    updates: s
  };
}
function Ca() {
  return typeof window > "u" ? !1 : typeof window.RTCPeerConnection < "u";
}
function jr(n) {
  return n.role === "system" ? n : n.role === "assistant" ? {
    ...n,
    content: n.content.map((e) => e.type === "audio" ? {
      ...e,
      audio: null
    } : e)
  } : n.role === "user" ? {
    ...n,
    content: n.content.map((e) => e.type === "input_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n;
}
function Ea(n, e, t) {
  const r = !t && e.type === "message" ? jr(e) : e, s = n.findIndex((a) => a.itemId === e.itemId);
  if (s !== -1)
    return n.map((a, i) => i === s ? r : !t && a.type === "message" ? jr(a) : a);
  if (e.previousItemId) {
    const a = n.findIndex((i) => i.itemId === e.previousItemId);
    return a !== -1 ? [
      ...n.slice(0, a + 1),
      r,
      ...n.slice(a + 1)
    ] : [...n, r];
  } else
    return [...n, r];
}
const Oa = {
  "User-Agent": `Agents/JavaScript ${Hn.version}`,
  "X-OpenAI-Agents-SDK": `openai-agents-sdk.${Hn.version}`
}, Na = `openai-agents-sdk.${Hn.version}`;
async function gr(n) {
  try {
    return [null, await n()];
  } catch (e) {
    return [e, null];
  }
}
function Ra(n, e) {
  const t = { ...n };
  return Object.defineProperties(t, {
    $brand: {
      value: "auto-parseable-response-format",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    }
  }), t;
}
const Da = Symbol("Let zodToJsonSchema decide on which parser to use"), Zr = {
  name: void 0,
  $refStrategy: "root",
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  nullableStrategy: "from-target",
  removeAdditionalStrategy: "passthrough",
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: !1,
  errorMessages: !1,
  markdownDescription: !1,
  patternStrategy: "escape",
  applyRegexFlags: !1,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref"
}, Pa = (n) => typeof n == "string" ? {
  ...Zr,
  basePath: ["#"],
  definitions: {},
  name: n
} : {
  ...Zr,
  basePath: ["#"],
  definitions: {},
  ...n
}, Yn = (n) => "_def" in n ? n._def : n;
function ja(n) {
  if (!n)
    return !0;
  for (const e in n)
    return !1;
  return !0;
}
const Za = (n) => {
  const e = Pa(n), t = e.name !== void 0 ? [...e.basePath, e.definitionPath, e.name] : e.basePath;
  return {
    ...e,
    currentPath: t,
    propertyPath: void 0,
    seenRefs: /* @__PURE__ */ new Set(),
    seen: new Map(Object.entries(e.definitions).map(([r, s]) => [
      Yn(s),
      {
        def: Yn(s),
        path: [...e.basePath, e.definitionPath, r],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};
function Es(n, e, t, r) {
  r != null && r.errorMessages && t && (n.errorMessage = {
    ...n.errorMessage,
    [e]: t
  });
}
function B(n, e, t, r, s) {
  n[e] = t, Es(n, e, r, s);
}
var Ct;
(function(n) {
  n.assertEqual = (s) => {
  };
  function e(s) {
  }
  n.assertIs = e;
  function t(s) {
    throw new Error();
  }
  n.assertNever = t, n.arrayToEnum = (s) => {
    const a = {};
    for (const i of s)
      a[i] = i;
    return a;
  }, n.getValidEnumValues = (s) => {
    const a = n.objectKeys(s).filter((o) => typeof s[s[o]] != "number"), i = {};
    for (const o of a)
      i[o] = s[o];
    return n.objectValues(i);
  }, n.objectValues = (s) => n.objectKeys(s).map(function(a) {
    return s[a];
  }), n.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    const a = [];
    for (const i in s)
      Object.prototype.hasOwnProperty.call(s, i) && a.push(i);
    return a;
  }, n.find = (s, a) => {
    for (const i of s)
      if (a(i))
        return i;
  }, n.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && Number.isFinite(s) && Math.floor(s) === s;
  function r(s, a = " | ") {
    return s.map((i) => typeof i == "string" ? `'${i}'` : i).join(a);
  }
  n.joinValues = r, n.jsonStringifyReplacer = (s, a) => typeof a == "bigint" ? a.toString() : a;
})(Ct || (Ct = {}));
var Mr;
(function(n) {
  n.mergeShapes = (e, t) => ({
    ...e,
    ...t
    // second overwrites first
  });
})(Mr || (Mr = {}));
Ct.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
Ct.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
let $r = class Os extends Error {
  get errors() {
    return this.issues;
  }
  constructor(e) {
    super(), this.issues = [], this.addIssue = (r) => {
      this.issues = [...this.issues, r];
    }, this.addIssues = (r = []) => {
      this.issues = [...this.issues, ...r];
    };
    const t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  format(e) {
    const t = e || function(a) {
      return a.message;
    }, r = { _errors: [] }, s = (a) => {
      for (const i of a.issues)
        if (i.code === "invalid_union")
          i.unionErrors.map(s);
        else if (i.code === "invalid_return_type")
          s(i.returnTypeError);
        else if (i.code === "invalid_arguments")
          s(i.argumentsError);
        else if (i.path.length === 0)
          r._errors.push(t(i));
        else {
          let o = r, d = 0;
          for (; d < i.path.length; ) {
            const p = i.path[d];
            d === i.path.length - 1 ? (o[p] = o[p] || { _errors: [] }, o[p]._errors.push(t(i))) : o[p] = o[p] || { _errors: [] }, o = o[p], d++;
          }
        }
    };
    return s(this), r;
  }
  static assert(e) {
    if (!(e instanceof Os))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, Ct.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    const t = {}, r = [];
    for (const s of this.issues)
      s.path.length > 0 ? (t[s.path[0]] = t[s.path[0]] || [], t[s.path[0]].push(e(s))) : r.push(e(s));
    return { formErrors: r, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
};
$r.create = (n) => new $r(n);
var Fr;
(function(n) {
  n.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, n.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(Fr || (Fr = {}));
var O;
(function(n) {
  n.ZodString = "ZodString", n.ZodNumber = "ZodNumber", n.ZodNaN = "ZodNaN", n.ZodBigInt = "ZodBigInt", n.ZodBoolean = "ZodBoolean", n.ZodDate = "ZodDate", n.ZodSymbol = "ZodSymbol", n.ZodUndefined = "ZodUndefined", n.ZodNull = "ZodNull", n.ZodAny = "ZodAny", n.ZodUnknown = "ZodUnknown", n.ZodNever = "ZodNever", n.ZodVoid = "ZodVoid", n.ZodArray = "ZodArray", n.ZodObject = "ZodObject", n.ZodUnion = "ZodUnion", n.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", n.ZodIntersection = "ZodIntersection", n.ZodTuple = "ZodTuple", n.ZodRecord = "ZodRecord", n.ZodMap = "ZodMap", n.ZodSet = "ZodSet", n.ZodFunction = "ZodFunction", n.ZodLazy = "ZodLazy", n.ZodLiteral = "ZodLiteral", n.ZodEnum = "ZodEnum", n.ZodEffects = "ZodEffects", n.ZodNativeEnum = "ZodNativeEnum", n.ZodOptional = "ZodOptional", n.ZodNullable = "ZodNullable", n.ZodDefault = "ZodDefault", n.ZodCatch = "ZodCatch", n.ZodPromise = "ZodPromise", n.ZodBranded = "ZodBranded", n.ZodPipeline = "ZodPipeline", n.ZodReadonly = "ZodReadonly";
})(O || (O = {}));
function Ma() {
  return {};
}
function $a(n, e) {
  var r, s;
  const t = {
    type: "array"
  };
  return ((s = (r = n.type) == null ? void 0 : r._def) == null ? void 0 : s.typeName) !== O.ZodAny && (t.items = F(n.type._def, {
    ...e,
    currentPath: [...e.currentPath, "items"]
  })), n.minLength && B(t, "minItems", n.minLength.value, n.minLength.message, e), n.maxLength && B(t, "maxItems", n.maxLength.value, n.maxLength.message, e), n.exactLength && (B(t, "minItems", n.exactLength.value, n.exactLength.message, e), B(t, "maxItems", n.exactLength.value, n.exactLength.message, e)), t;
}
function Fa(n, e) {
  const t = {
    type: "integer",
    format: "int64"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? B(t, "minimum", r.value, r.message, e) : B(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), B(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? B(t, "maximum", r.value, r.message, e) : B(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), B(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        B(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function La() {
  return {
    type: "boolean"
  };
}
function Ua(n, e) {
  return F(n.type._def, e);
}
const Ja = (n, e) => F(n.innerType._def, e);
function Ns(n, e, t) {
  const r = t ?? e.dateStrategy;
  if (Array.isArray(r))
    return {
      anyOf: r.map((s, a) => Ns(n, e, s))
    };
  switch (r) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return Ba(n, e);
  }
}
const Ba = (n, e) => {
  const t = {
    type: "integer",
    format: "unix-time"
  };
  if (e.target === "openApi3")
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        B(
          t,
          "minimum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
      case "max":
        B(
          t,
          "maximum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
    }
  return t;
};
function Ga(n, e) {
  return {
    ...F(n.innerType._def, e),
    default: n.defaultValue()
  };
}
function Va(n, e, t) {
  return e.effectStrategy === "input" ? F(n.schema._def, e, t) : {};
}
function za(n) {
  return {
    type: "string",
    enum: [...n.values]
  };
}
const qa = (n) => "type" in n && n.type === "string" ? !1 : "allOf" in n;
function Wa(n, e) {
  const t = [
    F(n.left._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "0"]
    }),
    F(n.right._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "1"]
    })
  ].filter((a) => !!a);
  let r = e.target === "jsonSchema2019-09" ? { unevaluatedProperties: !1 } : void 0;
  const s = [];
  return t.forEach((a) => {
    if (qa(a))
      s.push(...a.allOf), a.unevaluatedProperties === void 0 && (r = void 0);
    else {
      let i = a;
      if ("additionalProperties" in a && a.additionalProperties === !1) {
        const { additionalProperties: o, ...d } = a;
        i = d;
      } else
        r = void 0;
      s.push(i);
    }
  }), s.length ? {
    allOf: s,
    ...r
  } : void 0;
}
function Ha(n, e) {
  const t = typeof n.value;
  return t !== "bigint" && t !== "number" && t !== "boolean" && t !== "string" ? {
    type: Array.isArray(n.value) ? "array" : "object"
  } : e.target === "openApi3" ? {
    type: t === "bigint" ? "integer" : t,
    enum: [n.value]
  } : {
    type: t === "bigint" ? "integer" : t,
    const: n.value
  };
}
let Ln;
const Be = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => (Ln === void 0 && (Ln = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u")), Ln),
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/
};
function Rs(n, e) {
  const t = {
    type: "string"
  };
  function r(s) {
    return e.patternStrategy === "escape" ? Ya(s) : s;
  }
  if (n.checks)
    for (const s of n.checks)
      switch (s.kind) {
        case "min":
          B(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e);
          break;
        case "max":
          B(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "email":
          switch (e.emailStrategy) {
            case "format:email":
              pe(t, "email", s.message, e);
              break;
            case "format:idn-email":
              pe(t, "idn-email", s.message, e);
              break;
            case "pattern:zod":
              fe(t, Be.email, s.message, e);
              break;
          }
          break;
        case "url":
          pe(t, "uri", s.message, e);
          break;
        case "uuid":
          pe(t, "uuid", s.message, e);
          break;
        case "regex":
          fe(t, s.regex, s.message, e);
          break;
        case "cuid":
          fe(t, Be.cuid, s.message, e);
          break;
        case "cuid2":
          fe(t, Be.cuid2, s.message, e);
          break;
        case "startsWith":
          fe(t, RegExp(`^${r(s.value)}`), s.message, e);
          break;
        case "endsWith":
          fe(t, RegExp(`${r(s.value)}$`), s.message, e);
          break;
        case "datetime":
          pe(t, "date-time", s.message, e);
          break;
        case "date":
          pe(t, "date", s.message, e);
          break;
        case "time":
          pe(t, "time", s.message, e);
          break;
        case "duration":
          pe(t, "duration", s.message, e);
          break;
        case "length":
          B(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e), B(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "includes": {
          fe(t, RegExp(r(s.value)), s.message, e);
          break;
        }
        case "ip": {
          s.version !== "v6" && pe(t, "ipv4", s.message, e), s.version !== "v4" && pe(t, "ipv6", s.message, e);
          break;
        }
        case "emoji":
          fe(t, Be.emoji, s.message, e);
          break;
        case "ulid": {
          fe(t, Be.ulid, s.message, e);
          break;
        }
        case "base64": {
          switch (e.base64Strategy) {
            case "format:binary": {
              pe(t, "binary", s.message, e);
              break;
            }
            case "contentEncoding:base64": {
              B(t, "contentEncoding", "base64", s.message, e);
              break;
            }
            case "pattern:zod": {
              fe(t, Be.base64, s.message, e);
              break;
            }
          }
          break;
        }
        case "nanoid":
          fe(t, Be.nanoid, s.message, e);
      }
  return t;
}
const Ya = (n) => Array.from(n).map((e) => /[a-zA-Z0-9]/.test(e) ? e : `\\${e}`).join(""), pe = (n, e, t, r) => {
  var s;
  n.format || (s = n.anyOf) != null && s.some((a) => a.format) ? (n.anyOf || (n.anyOf = []), n.format && (n.anyOf.push({
    format: n.format,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { format: n.errorMessage.format }
    }
  }), delete n.format, n.errorMessage && (delete n.errorMessage.format, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.anyOf.push({
    format: e,
    ...t && r.errorMessages && { errorMessage: { format: t } }
  })) : B(n, "format", e, t, r);
}, fe = (n, e, t, r) => {
  var s;
  n.pattern || (s = n.allOf) != null && s.some((a) => a.pattern) ? (n.allOf || (n.allOf = []), n.pattern && (n.allOf.push({
    pattern: n.pattern,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { pattern: n.errorMessage.pattern }
    }
  }), delete n.pattern, n.errorMessage && (delete n.errorMessage.pattern, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.allOf.push({
    pattern: Lr(e, r),
    ...t && r.errorMessages && { errorMessage: { pattern: t } }
  })) : B(n, "pattern", Lr(e, r), t, r);
}, Lr = (n, e) => {
  var p;
  const t = typeof n == "function" ? n() : n;
  if (!e.applyRegexFlags || !t.flags)
    return t.source;
  const r = {
    i: t.flags.includes("i"),
    // Case-insensitive
    m: t.flags.includes("m"),
    // `^` and `$` matches adjacent to newline characters
    s: t.flags.includes("s")
    // `.` matches newlines
  }, s = r.i ? t.source.toLowerCase() : t.source;
  let a = "", i = !1, o = !1, d = !1;
  for (let l = 0; l < s.length; l++) {
    if (i) {
      a += s[l], i = !1;
      continue;
    }
    if (r.i) {
      if (o) {
        if (s[l].match(/[a-z]/)) {
          d ? (a += s[l], a += `${s[l - 2]}-${s[l]}`.toUpperCase(), d = !1) : s[l + 1] === "-" && ((p = s[l + 2]) != null && p.match(/[a-z]/)) ? (a += s[l], d = !0) : a += `${s[l]}${s[l].toUpperCase()}`;
          continue;
        }
      } else if (s[l].match(/[a-z]/)) {
        a += `[${s[l]}${s[l].toUpperCase()}]`;
        continue;
      }
    }
    if (r.m) {
      if (s[l] === "^") {
        a += `(^|(?<=[\r
]))`;
        continue;
      } else if (s[l] === "$") {
        a += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (r.s && s[l] === ".") {
      a += o ? `${s[l]}\r
` : `[${s[l]}\r
]`;
      continue;
    }
    a += s[l], s[l] === "\\" ? i = !0 : o && s[l] === "]" ? o = !1 : !o && s[l] === "[" && (o = !0);
  }
  try {
    const l = new RegExp(a);
  } catch {
    return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`), t.source;
  }
  return a;
};
function Ds(n, e) {
  var r, s, a, i;
  if (e.target === "openApi3" && ((r = n.keyType) == null ? void 0 : r._def.typeName) === O.ZodEnum)
    return {
      type: "object",
      required: n.keyType._def.values,
      properties: n.keyType._def.values.reduce((o, d) => ({
        ...o,
        [d]: F(n.valueType._def, {
          ...e,
          currentPath: [...e.currentPath, "properties", d]
        }) ?? {}
      }), {}),
      additionalProperties: !1
    };
  const t = {
    type: "object",
    additionalProperties: F(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalProperties"]
    }) ?? {}
  };
  if (e.target === "openApi3")
    return t;
  if (((s = n.keyType) == null ? void 0 : s._def.typeName) === O.ZodString && ((a = n.keyType._def.checks) != null && a.length)) {
    const o = Object.entries(Rs(n.keyType._def, e)).reduce((d, [p, l]) => p === "type" ? d : { ...d, [p]: l }, {});
    return {
      ...t,
      propertyNames: o
    };
  } else if (((i = n.keyType) == null ? void 0 : i._def.typeName) === O.ZodEnum)
    return {
      ...t,
      propertyNames: {
        enum: n.keyType._def.values
      }
    };
  return t;
}
function Xa(n, e) {
  if (e.mapStrategy === "record")
    return Ds(n, e);
  const t = F(n.keyType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "0"]
  }) || {}, r = F(n.valueType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "1"]
  }) || {};
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [t, r],
      minItems: 2,
      maxItems: 2
    }
  };
}
function Qa(n) {
  const e = n.values, r = Object.keys(n.values).filter((a) => typeof e[e[a]] != "number").map((a) => e[a]), s = Array.from(new Set(r.map((a) => typeof a)));
  return {
    type: s.length === 1 ? s[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: r
  };
}
function Ka() {
  return {
    not: {}
  };
}
function ei(n) {
  return n.target === "openApi3" ? {
    enum: ["null"],
    nullable: !0
  } : {
    type: "null"
  };
}
const hn = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function ti(n, e) {
  if (e.target === "openApi3")
    return Ur(n, e);
  const t = n.options instanceof Map ? Array.from(n.options.values()) : n.options;
  if (t.every((r) => r._def.typeName in hn && (!r._def.checks || !r._def.checks.length))) {
    const r = t.reduce((s, a) => {
      const i = hn[a._def.typeName];
      return i && !s.includes(i) ? [...s, i] : s;
    }, []);
    return {
      type: r.length > 1 ? r : r[0]
    };
  } else if (t.every((r) => r._def.typeName === "ZodLiteral" && !r.description)) {
    const r = t.reduce((s, a) => {
      const i = typeof a._def.value;
      switch (i) {
        case "string":
        case "number":
        case "boolean":
          return [...s, i];
        case "bigint":
          return [...s, "integer"];
        case "object":
          if (a._def.value === null)
            return [...s, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return s;
      }
    }, []);
    if (r.length === t.length) {
      const s = r.filter((a, i, o) => o.indexOf(a) === i);
      return {
        type: s.length > 1 ? s : s[0],
        enum: t.reduce((a, i) => a.includes(i._def.value) ? a : [...a, i._def.value], [])
      };
    }
  } else if (t.every((r) => r._def.typeName === "ZodEnum"))
    return {
      type: "string",
      enum: t.reduce((r, s) => [...r, ...s._def.values.filter((a) => !r.includes(a))], [])
    };
  return Ur(n, e);
}
const Ur = (n, e) => {
  const t = (n.options instanceof Map ? Array.from(n.options.values()) : n.options).map((r, s) => F(r._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", `${s}`]
  })).filter((r) => !!r && (!e.strictUnions || typeof r == "object" && Object.keys(r).length > 0));
  return t.length ? { anyOf: t } : void 0;
};
function ni(n, e) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(n.innerType._def.typeName) && (!n.innerType._def.checks || !n.innerType._def.checks.length))
    return e.target === "openApi3" || e.nullableStrategy === "property" ? {
      type: hn[n.innerType._def.typeName],
      nullable: !0
    } : {
      type: [hn[n.innerType._def.typeName], "null"]
    };
  if (e.target === "openApi3") {
    const r = F(n.innerType._def, {
      ...e,
      currentPath: [...e.currentPath]
    });
    return r && "$ref" in r ? { allOf: [r], nullable: !0 } : r && { ...r, nullable: !0 };
  }
  const t = F(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "0"]
  });
  return t && { anyOf: [t, { type: "null" }] };
}
function ri(n, e) {
  const t = {
    type: "number"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "int":
        t.type = "integer", Es(t, "type", r.message, e);
        break;
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? B(t, "minimum", r.value, r.message, e) : B(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), B(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? B(t, "maximum", r.value, r.message, e) : B(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), B(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        B(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function si(n, e) {
  return e.removeAdditionalStrategy === "strict" ? n.catchall._def.typeName === "ZodNever" ? n.unknownKeys !== "strict" : F(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0 : n.catchall._def.typeName === "ZodNever" ? n.unknownKeys === "passthrough" : F(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0;
}
function ai(n, e) {
  const t = {
    type: "object",
    ...Object.entries(n.shape()).reduce((r, [s, a]) => {
      var d;
      if (a === void 0 || a._def === void 0)
        return r;
      const i = [...e.currentPath, "properties", s], o = F(a._def, {
        ...e,
        currentPath: i,
        propertyPath: i
      });
      if (o === void 0)
        return r;
      if (e.openaiStrictMode && a.isOptional() && !a.isNullable() && typeof ((d = a._def) == null ? void 0 : d.defaultValue) > "u")
        throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
      return {
        properties: {
          ...r.properties,
          [s]: o
        },
        required: a.isOptional() && !e.openaiStrictMode ? r.required : [...r.required, s]
      };
    }, { properties: {}, required: [] }),
    additionalProperties: si(n, e)
  };
  return t.required.length || delete t.required, t;
}
const ii = (n, e) => {
  var r;
  if (e.currentPath.toString() === ((r = e.propertyPath) == null ? void 0 : r.toString()))
    return F(n.innerType._def, e);
  const t = F(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "1"]
  });
  return t ? {
    anyOf: [
      {
        not: {}
      },
      t
    ]
  } : {};
}, oi = (n, e) => {
  if (e.pipeStrategy === "input")
    return F(n.in._def, e);
  if (e.pipeStrategy === "output")
    return F(n.out._def, e);
  const t = F(n.in._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", "0"]
  }), r = F(n.out._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", t ? "1" : "0"]
  });
  return {
    allOf: [t, r].filter((s) => s !== void 0)
  };
};
function ui(n, e) {
  return F(n.type._def, e);
}
function ci(n, e) {
  const r = {
    type: "array",
    uniqueItems: !0,
    items: F(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "items"]
    })
  };
  return n.minSize && B(r, "minItems", n.minSize.value, n.minSize.message, e), n.maxSize && B(r, "maxItems", n.maxSize.value, n.maxSize.message, e), r;
}
function di(n, e) {
  return n.rest ? {
    type: "array",
    minItems: n.items.length,
    items: n.items.map((t, r) => F(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], []),
    additionalItems: F(n.rest._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalItems"]
    })
  } : {
    type: "array",
    minItems: n.items.length,
    maxItems: n.items.length,
    items: n.items.map((t, r) => F(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], [])
  };
}
function li() {
  return {
    not: {}
  };
}
function pi() {
  return {};
}
const fi = (n, e) => F(n.innerType._def, e);
function F(n, e, t = !1) {
  var i;
  const r = e.seen.get(n);
  if (e.override) {
    const o = (i = e.override) == null ? void 0 : i.call(e, n, e, r, t);
    if (o !== Da)
      return o;
  }
  if (r && !t) {
    const o = hi(r, e);
    if (o !== void 0)
      return "$ref" in o && e.seenRefs.add(o.$ref), o;
  }
  const s = { def: n, path: e.currentPath, jsonSchema: void 0 };
  e.seen.set(n, s);
  const a = gi(n, n.typeName, e, t);
  return a && _i(n, e, a), s.jsonSchema = a, a;
}
const hi = (n, e) => {
  switch (e.$refStrategy) {
    case "root":
      return { $ref: n.path.join("/") };
    // this case is needed as OpenAI strict mode doesn't support top-level `$ref`s, i.e.
    // the top-level schema *must* be `{"type": "object", "properties": {...}}` but if we ever
    // need to define a `$ref`, relative `$ref`s aren't supported, so we need to extract
    // the schema to `#/definitions/` and reference that.
    //
    // e.g. if we need to reference a schema at
    // `["#","definitions","contactPerson","properties","person1","properties","name"]`
    // then we'll extract it out to `contactPerson_properties_person1_properties_name`
    case "extract-to-root":
      const t = n.path.slice(e.basePath.length + 1).join("_");
      return t !== e.name && e.nameStrategy === "duplicate-ref" && (e.definitions[t] = n.def), { $ref: [...e.basePath, e.definitionPath, t].join("/") };
    case "relative":
      return { $ref: mi(e.currentPath, n.path) };
    case "none":
    case "seen":
      return n.path.length < e.currentPath.length && n.path.every((r, s) => e.currentPath[s] === r) ? (console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`), {}) : e.$refStrategy === "seen" ? {} : void 0;
  }
}, mi = (n, e) => {
  let t = 0;
  for (; t < n.length && t < e.length && n[t] === e[t]; t++)
    ;
  return [(n.length - t).toString(), ...e.slice(t)].join("/");
}, gi = (n, e, t, r) => {
  switch (e) {
    case O.ZodString:
      return Rs(n, t);
    case O.ZodNumber:
      return ri(n, t);
    case O.ZodObject:
      return ai(n, t);
    case O.ZodBigInt:
      return Fa(n, t);
    case O.ZodBoolean:
      return La();
    case O.ZodDate:
      return Ns(n, t);
    case O.ZodUndefined:
      return li();
    case O.ZodNull:
      return ei(t);
    case O.ZodArray:
      return $a(n, t);
    case O.ZodUnion:
    case O.ZodDiscriminatedUnion:
      return ti(n, t);
    case O.ZodIntersection:
      return Wa(n, t);
    case O.ZodTuple:
      return di(n, t);
    case O.ZodRecord:
      return Ds(n, t);
    case O.ZodLiteral:
      return Ha(n, t);
    case O.ZodEnum:
      return za(n);
    case O.ZodNativeEnum:
      return Qa(n);
    case O.ZodNullable:
      return ni(n, t);
    case O.ZodOptional:
      return ii(n, t);
    case O.ZodMap:
      return Xa(n, t);
    case O.ZodSet:
      return ci(n, t);
    case O.ZodLazy:
      return F(n.getter()._def, t);
    case O.ZodPromise:
      return ui(n, t);
    case O.ZodNaN:
    case O.ZodNever:
      return Ka();
    case O.ZodEffects:
      return Va(n, t, r);
    case O.ZodAny:
      return Ma();
    case O.ZodUnknown:
      return pi();
    case O.ZodDefault:
      return Ga(n, t);
    case O.ZodBranded:
      return Ua(n, t);
    case O.ZodReadonly:
      return fi(n, t);
    case O.ZodCatch:
      return Ja(n, t);
    case O.ZodPipeline:
      return oi(n, t);
    case O.ZodFunction:
    case O.ZodVoid:
    case O.ZodSymbol:
      return;
    default:
      return /* @__PURE__ */ ((s) => {
      })();
  }
}, _i = (n, e, t) => (n.description && (t.description = n.description, e.markdownDescription && (t.markdownDescription = n.description)), t), yi = (n, e) => {
  const t = Za(e), r = typeof e == "string" ? e : (e == null ? void 0 : e.nameStrategy) === "title" || e == null ? void 0 : e.name, s = F(n._def, r === void 0 ? t : {
    ...t,
    currentPath: [...t.basePath, t.definitionPath, r]
  }, !1) ?? {}, a = typeof e == "object" && e.name !== void 0 && e.nameStrategy === "title" ? e.name : void 0;
  a !== void 0 && (s.title = a);
  const i = (() => {
    if (ja(t.definitions))
      return;
    const d = {}, p = /* @__PURE__ */ new Set();
    for (let l = 0; l < 500; l++) {
      const h = Object.entries(t.definitions).filter(([f]) => !p.has(f));
      if (h.length === 0)
        break;
      for (const [f, x] of h)
        d[f] = F(Yn(x), { ...t, currentPath: [...t.basePath, t.definitionPath, f] }, !0) ?? {}, p.add(f);
    }
    return d;
  })(), o = r === void 0 ? i ? {
    ...s,
    [t.definitionPath]: i
  } : s : t.nameStrategy === "duplicate-ref" ? {
    ...s,
    ...i || t.seenRefs.size ? {
      [t.definitionPath]: {
        ...i,
        // only actually duplicate the schema definition if it was ever referenced
        // otherwise the duplication is completely pointless
        ...t.seenRefs.size ? { [r]: s } : void 0
      }
    } : void 0
  } : {
    $ref: [...t.$refStrategy === "relative" ? [] : t.basePath, t.definitionPath, r].join("/"),
    [t.definitionPath]: {
      ...i,
      [r]: s
    }
  };
  return t.target === "jsonSchema7" ? o.$schema = "http://json-schema.org/draft-07/schema#" : t.target === "jsonSchema2019-09" && (o.$schema = "https://json-schema.org/draft/2019-09/schema#"), o;
};
function vi(n, { parser: e, callback: t }) {
  const r = { ...n };
  return Object.defineProperties(r, {
    $brand: {
      value: "auto-parseable-tool",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    },
    $callback: {
      value: t,
      enumerable: !1
    }
  }), r;
}
function Ps(n, e) {
  return yi(n, {
    openaiStrictMode: !0,
    name: e.name,
    nameStrategy: "duplicate-ref",
    $refStrategy: "extract-to-root",
    nullableStrategy: "property"
  });
}
function wi(n, e, t) {
  return Ra({
    type: "json_schema",
    ...t,
    name: e,
    strict: !0,
    schema: Ps(n, { name: e })
  }, (r) => n.parse(JSON.parse(r)));
}
function xi(n) {
  return vi({
    type: "function",
    name: n.name,
    parameters: Ps(n.parameters, { name: n.name }),
    strict: !0
  }, {
    callback: n.function,
    parser: (e) => n.parameters.parse(JSON.parse(e))
  });
}
class Je extends Error {
  constructor(t, r) {
    super(t);
    _(this, "state");
    this.state = r;
  }
}
class bi extends Je {
}
class Jr extends Je {
}
class me extends Je {
}
class Y extends Je {
}
class Br extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class Si extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class Gr extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
class Xn extends Je {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
function Qe(n) {
  return typeof n == "object" && n !== null && "_def" in n && typeof n._def == "object" && n._def !== null && "typeName" in n._def && n._def.typeName === "ZodObject";
}
function ki(n) {
  return typeof n == "object" && n !== null && "input" in n && typeof n.input == "string";
}
function mn(n) {
  if (n = n.replace(/\s/g, "_"), n = n.replace(/[^a-zA-Z0-9]/g, "_"), n.length === 0)
    throw new Error("Tool name cannot be empty");
  return n;
}
function _r(n, e) {
  const t = (r) => JSON.parse(r);
  if (Qe(n)) {
    const r = xi({
      name: e,
      parameters: n,
      function: () => {
      }
    });
    return {
      schema: r.parameters,
      parser: r.$parseRaw
    };
  } else if (typeof n == "object" && n !== null)
    return {
      schema: n,
      parser: t
    };
  throw new Y("Input type is not a ZodObject or a valid JSON schema");
}
function Vr(n) {
  if (n === "text")
    return "text";
  if (Qe(n)) {
    const e = wi(n, "output");
    return {
      type: e.type,
      name: e.name,
      strict: e.strict || !1,
      schema: e.schema
    };
  }
  return n;
}
function Ti(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var on = { exports: {} }, Un, zr;
function Ii() {
  if (zr) return Un;
  zr = 1;
  var n = 1e3, e = n * 60, t = e * 60, r = t * 24, s = r * 7, a = r * 365.25;
  Un = function(l, h) {
    h = h || {};
    var f = typeof l;
    if (f === "string" && l.length > 0)
      return i(l);
    if (f === "number" && isFinite(l))
      return h.long ? d(l) : o(l);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(l)
    );
  };
  function i(l) {
    if (l = String(l), !(l.length > 100)) {
      var h = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        l
      );
      if (h) {
        var f = parseFloat(h[1]), x = (h[2] || "ms").toLowerCase();
        switch (x) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return f * a;
          case "weeks":
          case "week":
          case "w":
            return f * s;
          case "days":
          case "day":
          case "d":
            return f * r;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return f * t;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return f * e;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return f * n;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return f;
          default:
            return;
        }
      }
    }
  }
  function o(l) {
    var h = Math.abs(l);
    return h >= r ? Math.round(l / r) + "d" : h >= t ? Math.round(l / t) + "h" : h >= e ? Math.round(l / e) + "m" : h >= n ? Math.round(l / n) + "s" : l + "ms";
  }
  function d(l) {
    var h = Math.abs(l);
    return h >= r ? p(l, h, r, "day") : h >= t ? p(l, h, t, "hour") : h >= e ? p(l, h, e, "minute") : h >= n ? p(l, h, n, "second") : l + " ms";
  }
  function p(l, h, f, x) {
    var I = h >= f * 1.5;
    return Math.round(l / f) + " " + x + (I ? "s" : "");
  }
  return Un;
}
var Jn, qr;
function Ai() {
  if (qr) return Jn;
  qr = 1;
  function n(e) {
    r.debug = r, r.default = r, r.coerce = p, r.disable = o, r.enable = a, r.enabled = d, r.humanize = Ii(), r.destroy = l, Object.keys(e).forEach((h) => {
      r[h] = e[h];
    }), r.names = [], r.skips = [], r.formatters = {};
    function t(h) {
      let f = 0;
      for (let x = 0; x < h.length; x++)
        f = (f << 5) - f + h.charCodeAt(x), f |= 0;
      return r.colors[Math.abs(f) % r.colors.length];
    }
    r.selectColor = t;
    function r(h) {
      let f, x = null, I, G;
      function Z(...L) {
        if (!Z.enabled)
          return;
        const Q = Z, ae = Number(/* @__PURE__ */ new Date()), Se = ae - (f || ae);
        Q.diff = Se, Q.prev = f, Q.curr = ae, f = ae, L[0] = r.coerce(L[0]), typeof L[0] != "string" && L.unshift("%O");
        let ge = 0;
        L[0] = L[0].replace(/%([a-zA-Z%])/g, ($n, Sa) => {
          if ($n === "%%")
            return "%";
          ge++;
          const Dr = r.formatters[Sa];
          if (typeof Dr == "function") {
            const ka = L[ge];
            $n = Dr.call(Q, ka), L.splice(ge, 1), ge--;
          }
          return $n;
        }), r.formatArgs.call(Q, L), (Q.log || r.log).apply(Q, L);
      }
      return Z.namespace = h, Z.useColors = r.useColors(), Z.color = r.selectColor(h), Z.extend = s, Z.destroy = r.destroy, Object.defineProperty(Z, "enabled", {
        enumerable: !0,
        configurable: !1,
        get: () => x !== null ? x : (I !== r.namespaces && (I = r.namespaces, G = r.enabled(h)), G),
        set: (L) => {
          x = L;
        }
      }), typeof r.init == "function" && r.init(Z), Z;
    }
    function s(h, f) {
      const x = r(this.namespace + (typeof f > "u" ? ":" : f) + h);
      return x.log = this.log, x;
    }
    function a(h) {
      r.save(h), r.namespaces = h, r.names = [], r.skips = [];
      const f = (typeof h == "string" ? h : "").trim().replace(" ", ",").split(",").filter(Boolean);
      for (const x of f)
        x[0] === "-" ? r.skips.push(x.slice(1)) : r.names.push(x);
    }
    function i(h, f) {
      let x = 0, I = 0, G = -1, Z = 0;
      for (; x < h.length; )
        if (I < f.length && (f[I] === h[x] || f[I] === "*"))
          f[I] === "*" ? (G = I, Z = x, I++) : (x++, I++);
        else if (G !== -1)
          I = G + 1, Z++, x = Z;
        else
          return !1;
      for (; I < f.length && f[I] === "*"; )
        I++;
      return I === f.length;
    }
    function o() {
      const h = [
        ...r.names,
        ...r.skips.map((f) => "-" + f)
      ].join(",");
      return r.enable(""), h;
    }
    function d(h) {
      for (const f of r.skips)
        if (i(h, f))
          return !1;
      for (const f of r.names)
        if (i(h, f))
          return !0;
      return !1;
    }
    function p(h) {
      return h instanceof Error ? h.stack || h.message : h;
    }
    function l() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    return r.enable(r.load()), r;
  }
  return Jn = n, Jn;
}
var Wr;
function Ci() {
  return Wr || (Wr = 1, function(n, e) {
    e.formatArgs = r, e.save = s, e.load = a, e.useColors = t, e.storage = i(), e.destroy = /* @__PURE__ */ (() => {
      let d = !1;
      return () => {
        d || (d = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })(), e.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function t() {
      if (typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs))
        return !0;
      if (typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
        return !1;
      let d;
      return typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator < "u" && navigator.userAgent && (d = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(d[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function r(d) {
      if (d[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + d[0] + (this.useColors ? "%c " : " ") + "+" + n.exports.humanize(this.diff), !this.useColors)
        return;
      const p = "color: " + this.color;
      d.splice(1, 0, p, "color: inherit");
      let l = 0, h = 0;
      d[0].replace(/%[a-zA-Z%]/g, (f) => {
        f !== "%%" && (l++, f === "%c" && (h = l));
      }), d.splice(h, 0, p);
    }
    e.log = console.debug || console.log || (() => {
    });
    function s(d) {
      try {
        d ? e.storage.setItem("debug", d) : e.storage.removeItem("debug");
      } catch {
      }
    }
    function a() {
      let d;
      try {
        d = e.storage.getItem("debug");
      } catch {
      }
      return !d && typeof process < "u" && "env" in process && (d = process.env.DEBUG), d;
    }
    function i() {
      try {
        return localStorage;
      } catch {
      }
    }
    n.exports = Ai()(e);
    const { formatters: o } = n.exports;
    o.j = function(d) {
      try {
        return JSON.stringify(d);
      } catch (p) {
        return "[UnexpectedJSONParseError]: " + p.message;
      }
    };
  }(on, on.exports)), on.exports;
}
var Ei = Ci();
const Oi = /* @__PURE__ */ Ti(Ei);
function js() {
  return po();
}
function Qn(n) {
  const e = js();
  return typeof e < "u" && (e[n] === "true" || e[n] === "1");
}
const Zs = {
  get disabled() {
    return Qn("OPENAI_AGENTS_DISABLE_TRACING");
  }
}, Ms = {
  get dontLogModelData() {
    return Qn("OPENAI_AGENTS_DONT_LOG_MODEL_DATA");
  },
  get dontLogToolData() {
    return Qn("OPENAI_AGENTS_DONT_LOG_TOOL_DATA");
  }
}, Ni = Ms.dontLogModelData, Ri = Ms.dontLogToolData;
function $s(n = "openai-agents") {
  return {
    namespace: n,
    debug: Oi(n),
    error: console.error,
    warn: console.warn,
    dontLogModelData: Ni,
    dontLogToolData: Ri
  };
}
const A = $s("openai-agents:core");
function Ke(n) {
  if (n == null)
    return String(n);
  if (typeof n == "string")
    return n;
  if (typeof n == "object")
    try {
      return JSON.stringify(n);
    } catch {
      return "[object with circular references]";
    }
  return String(n);
}
function Di(n, e) {
  return `An error occurred while running the tool. Please try again. Error: ${e instanceof Error ? e.toString() : String(e)}`;
}
function Kn(n) {
  const e = n.name ? mn(n.name) : mn(n.execute.name), t = typeof n.errorFunction > "u" ? Di : n.errorFunction;
  if (!e)
    throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");
  const r = n.strict ?? !0;
  if (!r && Qe(n.parameters))
    throw new Y("Strict mode is required for Zod parameters");
  const { parser: s, schema: a } = _r(n.parameters, e);
  async function i(p, l) {
    const [h, f] = await gr(() => s(l));
    if (h !== null)
      throw A.dontLogToolData ? A.debug(`Invalid JSON input for tool ${e}`) : A.debug(`Invalid JSON input for tool ${e}: ${l}`), new me("Invalid JSON input for tool");
    A.dontLogToolData ? A.debug(`Invoking tool ${e}`) : A.debug(`Invoking tool ${e} with input ${l}`);
    const x = await n.execute(f, p), I = Ke(x);
    return A.dontLogToolData ? A.debug(`Tool ${e} completed`) : A.debug(`Tool ${e} returned: ${I}`), x;
  }
  async function o(p, l) {
    return i(p, l).catch((h) => {
      if (t) {
        const f = Rt();
        return f == null || f.setError({
          message: "Error running tool (non-fatal)",
          data: {
            tool_name: e,
            error: h.toString()
          }
        }), t(p, h);
      }
      throw h;
    });
  }
  const d = typeof n.needsApproval == "function" ? n.needsApproval : async () => typeof n.needsApproval == "boolean" ? n.needsApproval : !1;
  return {
    type: "function",
    name: e,
    description: n.description,
    parameters: a,
    strict: r,
    invoke: o,
    needsApproval: d
  };
}
var M;
(function(n) {
  n.assertEqual = (s) => {
  };
  function e(s) {
  }
  n.assertIs = e;
  function t(s) {
    throw new Error();
  }
  n.assertNever = t, n.arrayToEnum = (s) => {
    const a = {};
    for (const i of s)
      a[i] = i;
    return a;
  }, n.getValidEnumValues = (s) => {
    const a = n.objectKeys(s).filter((o) => typeof s[s[o]] != "number"), i = {};
    for (const o of a)
      i[o] = s[o];
    return n.objectValues(i);
  }, n.objectValues = (s) => n.objectKeys(s).map(function(a) {
    return s[a];
  }), n.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    const a = [];
    for (const i in s)
      Object.prototype.hasOwnProperty.call(s, i) && a.push(i);
    return a;
  }, n.find = (s, a) => {
    for (const i of s)
      if (a(i))
        return i;
  }, n.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && Number.isFinite(s) && Math.floor(s) === s;
  function r(s, a = " | ") {
    return s.map((i) => typeof i == "string" ? `'${i}'` : i).join(a);
  }
  n.joinValues = r, n.jsonStringifyReplacer = (s, a) => typeof a == "bigint" ? a.toString() : a;
})(M || (M = {}));
var Hr;
(function(n) {
  n.mergeShapes = (e, t) => ({
    ...e,
    ...t
    // second overwrites first
  });
})(Hr || (Hr = {}));
const S = M.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), Pe = (n) => {
  switch (typeof n) {
    case "undefined":
      return S.undefined;
    case "string":
      return S.string;
    case "number":
      return Number.isNaN(n) ? S.nan : S.number;
    case "boolean":
      return S.boolean;
    case "function":
      return S.function;
    case "bigint":
      return S.bigint;
    case "symbol":
      return S.symbol;
    case "object":
      return Array.isArray(n) ? S.array : n === null ? S.null : n.then && typeof n.then == "function" && n.catch && typeof n.catch == "function" ? S.promise : typeof Map < "u" && n instanceof Map ? S.map : typeof Set < "u" && n instanceof Set ? S.set : typeof Date < "u" && n instanceof Date ? S.date : S.object;
    default:
      return S.unknown;
  }
}, v = M.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
class Ne extends Error {
  get errors() {
    return this.issues;
  }
  constructor(e) {
    super(), this.issues = [], this.addIssue = (r) => {
      this.issues = [...this.issues, r];
    }, this.addIssues = (r = []) => {
      this.issues = [...this.issues, ...r];
    };
    const t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  format(e) {
    const t = e || function(a) {
      return a.message;
    }, r = { _errors: [] }, s = (a) => {
      for (const i of a.issues)
        if (i.code === "invalid_union")
          i.unionErrors.map(s);
        else if (i.code === "invalid_return_type")
          s(i.returnTypeError);
        else if (i.code === "invalid_arguments")
          s(i.argumentsError);
        else if (i.path.length === 0)
          r._errors.push(t(i));
        else {
          let o = r, d = 0;
          for (; d < i.path.length; ) {
            const p = i.path[d];
            d === i.path.length - 1 ? (o[p] = o[p] || { _errors: [] }, o[p]._errors.push(t(i))) : o[p] = o[p] || { _errors: [] }, o = o[p], d++;
          }
        }
    };
    return s(this), r;
  }
  static assert(e) {
    if (!(e instanceof Ne))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, M.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    const t = {}, r = [];
    for (const s of this.issues)
      s.path.length > 0 ? (t[s.path[0]] = t[s.path[0]] || [], t[s.path[0]].push(e(s))) : r.push(e(s));
    return { formErrors: r, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
}
Ne.create = (n) => new Ne(n);
const er = (n, e) => {
  let t;
  switch (n.code) {
    case v.invalid_type:
      n.received === S.undefined ? t = "Required" : t = `Expected ${n.expected}, received ${n.received}`;
      break;
    case v.invalid_literal:
      t = `Invalid literal value, expected ${JSON.stringify(n.expected, M.jsonStringifyReplacer)}`;
      break;
    case v.unrecognized_keys:
      t = `Unrecognized key(s) in object: ${M.joinValues(n.keys, ", ")}`;
      break;
    case v.invalid_union:
      t = "Invalid input";
      break;
    case v.invalid_union_discriminator:
      t = `Invalid discriminator value. Expected ${M.joinValues(n.options)}`;
      break;
    case v.invalid_enum_value:
      t = `Invalid enum value. Expected ${M.joinValues(n.options)}, received '${n.received}'`;
      break;
    case v.invalid_arguments:
      t = "Invalid function arguments";
      break;
    case v.invalid_return_type:
      t = "Invalid function return type";
      break;
    case v.invalid_date:
      t = "Invalid date";
      break;
    case v.invalid_string:
      typeof n.validation == "object" ? "includes" in n.validation ? (t = `Invalid input: must include "${n.validation.includes}"`, typeof n.validation.position == "number" && (t = `${t} at one or more positions greater than or equal to ${n.validation.position}`)) : "startsWith" in n.validation ? t = `Invalid input: must start with "${n.validation.startsWith}"` : "endsWith" in n.validation ? t = `Invalid input: must end with "${n.validation.endsWith}"` : M.assertNever(n.validation) : n.validation !== "regex" ? t = `Invalid ${n.validation}` : t = "Invalid";
      break;
    case v.too_small:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "more than"} ${n.minimum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "over"} ${n.minimum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${n.minimum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(n.minimum))}` : t = "Invalid input";
      break;
    case v.too_big:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "less than"} ${n.maximum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "under"} ${n.maximum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "bigint" ? t = `BigInt must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly" : n.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(n.maximum))}` : t = "Invalid input";
      break;
    case v.custom:
      t = "Invalid input";
      break;
    case v.invalid_intersection_types:
      t = "Intersection results could not be merged";
      break;
    case v.not_multiple_of:
      t = `Number must be a multiple of ${n.multipleOf}`;
      break;
    case v.not_finite:
      t = "Number must be finite";
      break;
    default:
      t = e.defaultError, M.assertNever(n);
  }
  return { message: t };
};
let Pi = er;
function ji() {
  return Pi;
}
const Zi = (n) => {
  const { data: e, path: t, errorMaps: r, issueData: s } = n, a = [...t, ...s.path || []], i = {
    ...s,
    path: a
  };
  if (s.message !== void 0)
    return {
      ...s,
      path: a,
      message: s.message
    };
  let o = "";
  const d = r.filter((p) => !!p).slice().reverse();
  for (const p of d)
    o = p(i, { data: e, defaultError: o }).message;
  return {
    ...s,
    path: a,
    message: o
  };
};
function w(n, e) {
  const t = ji(), r = Zi({
    issueData: e,
    data: n.data,
    path: n.path,
    errorMaps: [
      n.common.contextualErrorMap,
      // contextual error map is first priority
      n.schemaErrorMap,
      // then schema-bound map if available
      t,
      // then global override map
      t === er ? void 0 : er
      // then global default map
    ].filter((s) => !!s)
  });
  n.common.issues.push(r);
}
class se {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(e, t) {
    const r = [];
    for (const s of t) {
      if (s.status === "aborted")
        return C;
      s.status === "dirty" && e.dirty(), r.push(s.value);
    }
    return { status: e.value, value: r };
  }
  static async mergeObjectAsync(e, t) {
    const r = [];
    for (const s of t) {
      const a = await s.key, i = await s.value;
      r.push({
        key: a,
        value: i
      });
    }
    return se.mergeObjectSync(e, r);
  }
  static mergeObjectSync(e, t) {
    const r = {};
    for (const s of t) {
      const { key: a, value: i } = s;
      if (a.status === "aborted" || i.status === "aborted")
        return C;
      a.status === "dirty" && e.dirty(), i.status === "dirty" && e.dirty(), a.value !== "__proto__" && (typeof i.value < "u" || s.alwaysSet) && (r[a.value] = i.value);
    }
    return { status: e.value, value: r };
  }
}
const C = Object.freeze({
  status: "aborted"
}), kt = (n) => ({ status: "dirty", value: n }), le = (n) => ({ status: "valid", value: n }), Yr = (n) => n.status === "aborted", Xr = (n) => n.status === "dirty", wt = (n) => n.status === "valid", gn = (n) => typeof Promise < "u" && n instanceof Promise;
var k;
(function(n) {
  n.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, n.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(k || (k = {}));
class we {
  constructor(e, t, r, s) {
    this._cachedPath = [], this.parent = e, this.data = t, this._path = r, this._key = s;
  }
  get path() {
    return this._cachedPath.length || (Array.isArray(this._key) ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const Qr = (n, e) => {
  if (wt(e))
    return { success: !0, data: e.value };
  if (!n.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const t = new Ne(n.common.issues);
      return this._error = t, this._error;
    }
  };
};
function N(n) {
  if (!n)
    return {};
  const { errorMap: e, invalid_type_error: t, required_error: r, description: s } = n;
  if (e && (t || r))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return e ? { errorMap: e, description: s } : { errorMap: (i, o) => {
    const { message: d } = n;
    return i.code === "invalid_enum_value" ? { message: d ?? o.defaultError } : typeof o.data > "u" ? { message: d ?? r ?? o.defaultError } : i.code !== "invalid_type" ? { message: o.defaultError } : { message: d ?? t ?? o.defaultError };
  }, description: s };
}
class P {
  get description() {
    return this._def.description;
  }
  _getType(e) {
    return Pe(e.data);
  }
  _getOrReturnCtx(e, t) {
    return t || {
      common: e.parent.common,
      data: e.data,
      parsedType: Pe(e.data),
      schemaErrorMap: this._def.errorMap,
      path: e.path,
      parent: e.parent
    };
  }
  _processInputParams(e) {
    return {
      status: new se(),
      ctx: {
        common: e.parent.common,
        data: e.data,
        parsedType: Pe(e.data),
        schemaErrorMap: this._def.errorMap,
        path: e.path,
        parent: e.parent
      }
    };
  }
  _parseSync(e) {
    const t = this._parse(e);
    if (gn(t))
      throw new Error("Synchronous parse encountered promise.");
    return t;
  }
  _parseAsync(e) {
    const t = this._parse(e);
    return Promise.resolve(t);
  }
  parse(e, t) {
    const r = this.safeParse(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  safeParse(e, t) {
    const r = {
      common: {
        issues: [],
        async: (t == null ? void 0 : t.async) ?? !1,
        contextualErrorMap: t == null ? void 0 : t.errorMap
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Pe(e)
    }, s = this._parseSync({ data: e, path: r.path, parent: r });
    return Qr(r, s);
  }
  "~validate"(e) {
    var r, s;
    const t = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Pe(e)
    };
    if (!this["~standard"].async)
      try {
        const a = this._parseSync({ data: e, path: [], parent: t });
        return wt(a) ? {
          value: a.value
        } : {
          issues: t.common.issues
        };
      } catch (a) {
        (s = (r = a == null ? void 0 : a.message) == null ? void 0 : r.toLowerCase()) != null && s.includes("encountered") && (this["~standard"].async = !0), t.common = {
          issues: [],
          async: !0
        };
      }
    return this._parseAsync({ data: e, path: [], parent: t }).then((a) => wt(a) ? {
      value: a.value
    } : {
      issues: t.common.issues
    });
  }
  async parseAsync(e, t) {
    const r = await this.safeParseAsync(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  async safeParseAsync(e, t) {
    const r = {
      common: {
        issues: [],
        contextualErrorMap: t == null ? void 0 : t.errorMap,
        async: !0
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Pe(e)
    }, s = this._parse({ data: e, path: r.path, parent: r }), a = await (gn(s) ? s : Promise.resolve(s));
    return Qr(r, a);
  }
  refine(e, t) {
    const r = (s) => typeof t == "string" || typeof t > "u" ? { message: t } : typeof t == "function" ? t(s) : t;
    return this._refinement((s, a) => {
      const i = e(s), o = () => a.addIssue({
        code: v.custom,
        ...r(s)
      });
      return typeof Promise < "u" && i instanceof Promise ? i.then((d) => d ? !0 : (o(), !1)) : i ? !0 : (o(), !1);
    });
  }
  refinement(e, t) {
    return this._refinement((r, s) => e(r) ? !0 : (s.addIssue(typeof t == "function" ? t(r, s) : t), !1));
  }
  _refinement(e) {
    return new nt({
      schema: this,
      typeName: E.ZodEffects,
      effect: { type: "refinement", refinement: e }
    });
  }
  superRefine(e) {
    return this._refinement(e);
  }
  constructor(e) {
    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (t) => this["~validate"](t)
    };
  }
  optional() {
    return Oe.create(this, this._def);
  }
  nullable() {
    return rt.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ve.create(this);
  }
  promise() {
    return Sn.create(this, this._def);
  }
  or(e) {
    return yn.create([this, e], this._def);
  }
  and(e) {
    return vn.create(this, e, this._def);
  }
  transform(e) {
    return new nt({
      ...N(this._def),
      schema: this,
      typeName: E.ZodEffects,
      effect: { type: "transform", transform: e }
    });
  }
  default(e) {
    const t = typeof e == "function" ? e : () => e;
    return new kn({
      ...N(this._def),
      innerType: this,
      defaultValue: t,
      typeName: E.ZodDefault
    });
  }
  brand() {
    return new Js({
      typeName: E.ZodBranded,
      type: this,
      ...N(this._def)
    });
  }
  catch(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Tn({
      ...N(this._def),
      innerType: this,
      catchValue: t,
      typeName: E.ZodCatch
    });
  }
  describe(e) {
    const t = this.constructor;
    return new t({
      ...this._def,
      description: e
    });
  }
  pipe(e) {
    return vr.create(this, e);
  }
  readonly() {
    return In.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const Mi = /^c[^\s-]{8,}$/i, $i = /^[0-9a-z]+$/, Fi = /^[0-9A-HJKMNP-TV-Z]{26}$/i, Li = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i, Ui = /^[a-z0-9_-]{21}$/i, Ji = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/, Bi = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/, Gi = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i, Vi = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
let Bn;
const zi = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, qi = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/, Wi = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/, Hi = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/, Yi = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, Xi = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/, Fs = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))", Qi = new RegExp(`^${Fs}$`);
function Ls(n) {
  let e = "[0-5]\\d";
  n.precision ? e = `${e}\\.\\d{${n.precision}}` : n.precision == null && (e = `${e}(\\.\\d+)?`);
  const t = n.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`;
}
function Ki(n) {
  return new RegExp(`^${Ls(n)}$`);
}
function eo(n) {
  let e = `${Fs}T${Ls(n)}`;
  const t = [];
  return t.push(n.local ? "Z?" : "Z"), n.offset && t.push("([+-]\\d{2}:?\\d{2})"), e = `${e}(${t.join("|")})`, new RegExp(`^${e}$`);
}
function to(n, e) {
  return !!((e === "v4" || !e) && zi.test(n) || (e === "v6" || !e) && Wi.test(n));
}
function no(n, e) {
  if (!Ji.test(n))
    return !1;
  try {
    const [t] = n.split("."), r = t.replace(/-/g, "+").replace(/_/g, "/").padEnd(t.length + (4 - t.length % 4) % 4, "="), s = JSON.parse(atob(r));
    return !(typeof s != "object" || s === null || "typ" in s && (s == null ? void 0 : s.typ) !== "JWT" || !s.alg || e && s.alg !== e);
  } catch {
    return !1;
  }
}
function ro(n, e) {
  return !!((e === "v4" || !e) && qi.test(n) || (e === "v6" || !e) && Hi.test(n));
}
class Ee extends P {
  _parse(e) {
    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== S.string) {
      const a = this._getOrReturnCtx(e);
      return w(a, {
        code: v.invalid_type,
        expected: S.string,
        received: a.parsedType
      }), C;
    }
    const r = new se();
    let s;
    for (const a of this._def.checks)
      if (a.kind === "min")
        e.data.length < a.value && (s = this._getOrReturnCtx(e, s), w(s, {
          code: v.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "max")
        e.data.length > a.value && (s = this._getOrReturnCtx(e, s), w(s, {
          code: v.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "length") {
        const i = e.data.length > a.value, o = e.data.length < a.value;
        (i || o) && (s = this._getOrReturnCtx(e, s), i ? w(s, {
          code: v.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }) : o && w(s, {
          code: v.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }), r.dirty());
      } else if (a.kind === "email")
        Gi.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
          validation: "email",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "emoji")
        Bn || (Bn = new RegExp(Vi, "u")), Bn.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
          validation: "emoji",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "uuid")
        Li.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
          validation: "uuid",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "nanoid")
        Ui.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
          validation: "nanoid",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid")
        Mi.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
          validation: "cuid",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid2")
        $i.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
          validation: "cuid2",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "ulid")
        Fi.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
          validation: "ulid",
          code: v.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "url")
        try {
          new URL(e.data);
        } catch {
          s = this._getOrReturnCtx(e, s), w(s, {
            validation: "url",
            code: v.invalid_string,
            message: a.message
          }), r.dirty();
        }
      else a.kind === "regex" ? (a.regex.lastIndex = 0, a.regex.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
        validation: "regex",
        code: v.invalid_string,
        message: a.message
      }), r.dirty())) : a.kind === "trim" ? e.data = e.data.trim() : a.kind === "includes" ? e.data.includes(a.value, a.position) || (s = this._getOrReturnCtx(e, s), w(s, {
        code: v.invalid_string,
        validation: { includes: a.value, position: a.position },
        message: a.message
      }), r.dirty()) : a.kind === "toLowerCase" ? e.data = e.data.toLowerCase() : a.kind === "toUpperCase" ? e.data = e.data.toUpperCase() : a.kind === "startsWith" ? e.data.startsWith(a.value) || (s = this._getOrReturnCtx(e, s), w(s, {
        code: v.invalid_string,
        validation: { startsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "endsWith" ? e.data.endsWith(a.value) || (s = this._getOrReturnCtx(e, s), w(s, {
        code: v.invalid_string,
        validation: { endsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "datetime" ? eo(a).test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
        code: v.invalid_string,
        validation: "datetime",
        message: a.message
      }), r.dirty()) : a.kind === "date" ? Qi.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
        code: v.invalid_string,
        validation: "date",
        message: a.message
      }), r.dirty()) : a.kind === "time" ? Ki(a).test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
        code: v.invalid_string,
        validation: "time",
        message: a.message
      }), r.dirty()) : a.kind === "duration" ? Bi.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
        validation: "duration",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "ip" ? to(e.data, a.version) || (s = this._getOrReturnCtx(e, s), w(s, {
        validation: "ip",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "jwt" ? no(e.data, a.alg) || (s = this._getOrReturnCtx(e, s), w(s, {
        validation: "jwt",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "cidr" ? ro(e.data, a.version) || (s = this._getOrReturnCtx(e, s), w(s, {
        validation: "cidr",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64" ? Yi.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
        validation: "base64",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64url" ? Xi.test(e.data) || (s = this._getOrReturnCtx(e, s), w(s, {
        validation: "base64url",
        code: v.invalid_string,
        message: a.message
      }), r.dirty()) : M.assertNever(a);
    return { status: r.value, value: e.data };
  }
  _regex(e, t, r) {
    return this.refinement((s) => e.test(s), {
      validation: t,
      code: v.invalid_string,
      ...k.errToObj(r)
    });
  }
  _addCheck(e) {
    return new Ee({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  email(e) {
    return this._addCheck({ kind: "email", ...k.errToObj(e) });
  }
  url(e) {
    return this._addCheck({ kind: "url", ...k.errToObj(e) });
  }
  emoji(e) {
    return this._addCheck({ kind: "emoji", ...k.errToObj(e) });
  }
  uuid(e) {
    return this._addCheck({ kind: "uuid", ...k.errToObj(e) });
  }
  nanoid(e) {
    return this._addCheck({ kind: "nanoid", ...k.errToObj(e) });
  }
  cuid(e) {
    return this._addCheck({ kind: "cuid", ...k.errToObj(e) });
  }
  cuid2(e) {
    return this._addCheck({ kind: "cuid2", ...k.errToObj(e) });
  }
  ulid(e) {
    return this._addCheck({ kind: "ulid", ...k.errToObj(e) });
  }
  base64(e) {
    return this._addCheck({ kind: "base64", ...k.errToObj(e) });
  }
  base64url(e) {
    return this._addCheck({
      kind: "base64url",
      ...k.errToObj(e)
    });
  }
  jwt(e) {
    return this._addCheck({ kind: "jwt", ...k.errToObj(e) });
  }
  ip(e) {
    return this._addCheck({ kind: "ip", ...k.errToObj(e) });
  }
  cidr(e) {
    return this._addCheck({ kind: "cidr", ...k.errToObj(e) });
  }
  datetime(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      local: !1,
      message: e
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      offset: (e == null ? void 0 : e.offset) ?? !1,
      local: (e == null ? void 0 : e.local) ?? !1,
      ...k.errToObj(e == null ? void 0 : e.message)
    });
  }
  date(e) {
    return this._addCheck({ kind: "date", message: e });
  }
  time(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "time",
      precision: null,
      message: e
    }) : this._addCheck({
      kind: "time",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      ...k.errToObj(e == null ? void 0 : e.message)
    });
  }
  duration(e) {
    return this._addCheck({ kind: "duration", ...k.errToObj(e) });
  }
  regex(e, t) {
    return this._addCheck({
      kind: "regex",
      regex: e,
      ...k.errToObj(t)
    });
  }
  includes(e, t) {
    return this._addCheck({
      kind: "includes",
      value: e,
      position: t == null ? void 0 : t.position,
      ...k.errToObj(t == null ? void 0 : t.message)
    });
  }
  startsWith(e, t) {
    return this._addCheck({
      kind: "startsWith",
      value: e,
      ...k.errToObj(t)
    });
  }
  endsWith(e, t) {
    return this._addCheck({
      kind: "endsWith",
      value: e,
      ...k.errToObj(t)
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e,
      ...k.errToObj(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e,
      ...k.errToObj(t)
    });
  }
  length(e, t) {
    return this._addCheck({
      kind: "length",
      value: e,
      ...k.errToObj(t)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(e) {
    return this.min(1, k.errToObj(e));
  }
  trim() {
    return new Ee({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new Ee({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new Ee({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((e) => e.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((e) => e.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((e) => e.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((e) => e.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((e) => e.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((e) => e.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((e) => e.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((e) => e.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((e) => e.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((e) => e.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((e) => e.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((e) => e.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((e) => e.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((e) => e.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((e) => e.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((e) => e.kind === "base64url");
  }
  get minLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Ee.create = (n) => new Ee({
  checks: [],
  typeName: E.ZodString,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...N(n)
});
function so(n, e) {
  const t = (n.toString().split(".")[1] || "").length, r = (e.toString().split(".")[1] || "").length, s = t > r ? t : r, a = Number.parseInt(n.toFixed(s).replace(".", "")), i = Number.parseInt(e.toFixed(s).replace(".", ""));
  return a % i / 10 ** s;
}
class xt extends P {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== S.number) {
      const a = this._getOrReturnCtx(e);
      return w(a, {
        code: v.invalid_type,
        expected: S.number,
        received: a.parsedType
      }), C;
    }
    let r;
    const s = new se();
    for (const a of this._def.checks)
      a.kind === "int" ? M.isInteger(e.data) || (r = this._getOrReturnCtx(e, r), w(r, {
        code: v.invalid_type,
        expected: "integer",
        received: "float",
        message: a.message
      }), s.dirty()) : a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), w(r, {
        code: v.too_small,
        minimum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), w(r, {
        code: v.too_big,
        maximum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? so(e.data, a.value) !== 0 && (r = this._getOrReturnCtx(e, r), w(r, {
        code: v.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : a.kind === "finite" ? Number.isFinite(e.data) || (r = this._getOrReturnCtx(e, r), w(r, {
        code: v.not_finite,
        message: a.message
      }), s.dirty()) : M.assertNever(a);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, k.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, k.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, k.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, k.toString(t));
  }
  setLimit(e, t, r, s) {
    return new xt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: k.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new xt({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  int(e) {
    return this._addCheck({
      kind: "int",
      message: k.toString(e)
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: k.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: k.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: k.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: k.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: k.toString(t)
    });
  }
  finite(e) {
    return this._addCheck({
      kind: "finite",
      message: k.toString(e)
    });
  }
  safe(e) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: k.toString(e)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: k.toString(e)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
  get isInt() {
    return !!this._def.checks.find((e) => e.kind === "int" || e.kind === "multipleOf" && M.isInteger(e.value));
  }
  get isFinite() {
    let e = null, t = null;
    for (const r of this._def.checks) {
      if (r.kind === "finite" || r.kind === "int" || r.kind === "multipleOf")
        return !0;
      r.kind === "min" ? (t === null || r.value > t) && (t = r.value) : r.kind === "max" && (e === null || r.value < e) && (e = r.value);
    }
    return Number.isFinite(t) && Number.isFinite(e);
  }
}
xt.create = (n) => new xt({
  checks: [],
  typeName: E.ZodNumber,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...N(n)
});
class Et extends P {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(e) {
    if (this._def.coerce)
      try {
        e.data = BigInt(e.data);
      } catch {
        return this._getInvalidInput(e);
      }
    if (this._getType(e) !== S.bigint)
      return this._getInvalidInput(e);
    let r;
    const s = new se();
    for (const a of this._def.checks)
      a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), w(r, {
        code: v.too_small,
        type: "bigint",
        minimum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), w(r, {
        code: v.too_big,
        type: "bigint",
        maximum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? e.data % a.value !== BigInt(0) && (r = this._getOrReturnCtx(e, r), w(r, {
        code: v.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : M.assertNever(a);
    return { status: s.value, value: e.data };
  }
  _getInvalidInput(e) {
    const t = this._getOrReturnCtx(e);
    return w(t, {
      code: v.invalid_type,
      expected: S.bigint,
      received: t.parsedType
    }), C;
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, k.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, k.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, k.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, k.toString(t));
  }
  setLimit(e, t, r, s) {
    return new Et({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: k.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new Et({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: k.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: k.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: k.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: k.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: k.toString(t)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Et.create = (n) => new Et({
  checks: [],
  typeName: E.ZodBigInt,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...N(n)
});
class tr extends P {
  _parse(e) {
    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== S.boolean) {
      const r = this._getOrReturnCtx(e);
      return w(r, {
        code: v.invalid_type,
        expected: S.boolean,
        received: r.parsedType
      }), C;
    }
    return le(e.data);
  }
}
tr.create = (n) => new tr({
  typeName: E.ZodBoolean,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...N(n)
});
class _n extends P {
  _parse(e) {
    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== S.date) {
      const a = this._getOrReturnCtx(e);
      return w(a, {
        code: v.invalid_type,
        expected: S.date,
        received: a.parsedType
      }), C;
    }
    if (Number.isNaN(e.data.getTime())) {
      const a = this._getOrReturnCtx(e);
      return w(a, {
        code: v.invalid_date
      }), C;
    }
    const r = new se();
    let s;
    for (const a of this._def.checks)
      a.kind === "min" ? e.data.getTime() < a.value && (s = this._getOrReturnCtx(e, s), w(s, {
        code: v.too_small,
        message: a.message,
        inclusive: !0,
        exact: !1,
        minimum: a.value,
        type: "date"
      }), r.dirty()) : a.kind === "max" ? e.data.getTime() > a.value && (s = this._getOrReturnCtx(e, s), w(s, {
        code: v.too_big,
        message: a.message,
        inclusive: !0,
        exact: !1,
        maximum: a.value,
        type: "date"
      }), r.dirty()) : M.assertNever(a);
    return {
      status: r.value,
      value: new Date(e.data.getTime())
    };
  }
  _addCheck(e) {
    return new _n({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e.getTime(),
      message: k.toString(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e.getTime(),
      message: k.toString(t)
    });
  }
  get minDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
  get maxDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
}
_n.create = (n) => new _n({
  checks: [],
  coerce: (n == null ? void 0 : n.coerce) || !1,
  typeName: E.ZodDate,
  ...N(n)
});
class Kr extends P {
  _parse(e) {
    if (this._getType(e) !== S.symbol) {
      const r = this._getOrReturnCtx(e);
      return w(r, {
        code: v.invalid_type,
        expected: S.symbol,
        received: r.parsedType
      }), C;
    }
    return le(e.data);
  }
}
Kr.create = (n) => new Kr({
  typeName: E.ZodSymbol,
  ...N(n)
});
class nr extends P {
  _parse(e) {
    if (this._getType(e) !== S.undefined) {
      const r = this._getOrReturnCtx(e);
      return w(r, {
        code: v.invalid_type,
        expected: S.undefined,
        received: r.parsedType
      }), C;
    }
    return le(e.data);
  }
}
nr.create = (n) => new nr({
  typeName: E.ZodUndefined,
  ...N(n)
});
class rr extends P {
  _parse(e) {
    if (this._getType(e) !== S.null) {
      const r = this._getOrReturnCtx(e);
      return w(r, {
        code: v.invalid_type,
        expected: S.null,
        received: r.parsedType
      }), C;
    }
    return le(e.data);
  }
}
rr.create = (n) => new rr({
  typeName: E.ZodNull,
  ...N(n)
});
class sr extends P {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(e) {
    return le(e.data);
  }
}
sr.create = (n) => new sr({
  typeName: E.ZodAny,
  ...N(n)
});
class es extends P {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(e) {
    return le(e.data);
  }
}
es.create = (n) => new es({
  typeName: E.ZodUnknown,
  ...N(n)
});
class Ue extends P {
  _parse(e) {
    const t = this._getOrReturnCtx(e);
    return w(t, {
      code: v.invalid_type,
      expected: S.never,
      received: t.parsedType
    }), C;
  }
}
Ue.create = (n) => new Ue({
  typeName: E.ZodNever,
  ...N(n)
});
class ts extends P {
  _parse(e) {
    if (this._getType(e) !== S.undefined) {
      const r = this._getOrReturnCtx(e);
      return w(r, {
        code: v.invalid_type,
        expected: S.void,
        received: r.parsedType
      }), C;
    }
    return le(e.data);
  }
}
ts.create = (n) => new ts({
  typeName: E.ZodVoid,
  ...N(n)
});
class ve extends P {
  _parse(e) {
    const { ctx: t, status: r } = this._processInputParams(e), s = this._def;
    if (t.parsedType !== S.array)
      return w(t, {
        code: v.invalid_type,
        expected: S.array,
        received: t.parsedType
      }), C;
    if (s.exactLength !== null) {
      const i = t.data.length > s.exactLength.value, o = t.data.length < s.exactLength.value;
      (i || o) && (w(t, {
        code: i ? v.too_big : v.too_small,
        minimum: o ? s.exactLength.value : void 0,
        maximum: i ? s.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: s.exactLength.message
      }), r.dirty());
    }
    if (s.minLength !== null && t.data.length < s.minLength.value && (w(t, {
      code: v.too_small,
      minimum: s.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.minLength.message
    }), r.dirty()), s.maxLength !== null && t.data.length > s.maxLength.value && (w(t, {
      code: v.too_big,
      maximum: s.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.maxLength.message
    }), r.dirty()), t.common.async)
      return Promise.all([...t.data].map((i, o) => s.type._parseAsync(new we(t, i, t.path, o)))).then((i) => se.mergeArray(r, i));
    const a = [...t.data].map((i, o) => s.type._parseSync(new we(t, i, t.path, o)));
    return se.mergeArray(r, a);
  }
  get element() {
    return this._def.type;
  }
  min(e, t) {
    return new ve({
      ...this._def,
      minLength: { value: e, message: k.toString(t) }
    });
  }
  max(e, t) {
    return new ve({
      ...this._def,
      maxLength: { value: e, message: k.toString(t) }
    });
  }
  length(e, t) {
    return new ve({
      ...this._def,
      exactLength: { value: e, message: k.toString(t) }
    });
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
ve.create = (n, e) => new ve({
  type: n,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: E.ZodArray,
  ...N(e)
});
function ot(n) {
  if (n instanceof W) {
    const e = {};
    for (const t in n.shape) {
      const r = n.shape[t];
      e[t] = Oe.create(ot(r));
    }
    return new W({
      ...n._def,
      shape: () => e
    });
  } else return n instanceof ve ? new ve({
    ...n._def,
    type: ot(n.element)
  }) : n instanceof Oe ? Oe.create(ot(n.unwrap())) : n instanceof rt ? rt.create(ot(n.unwrap())) : n instanceof et ? et.create(n.items.map((e) => ot(e))) : n;
}
class W extends P {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const e = this._def.shape(), t = M.objectKeys(e);
    return this._cached = { shape: e, keys: t }, this._cached;
  }
  _parse(e) {
    if (this._getType(e) !== S.object) {
      const p = this._getOrReturnCtx(e);
      return w(p, {
        code: v.invalid_type,
        expected: S.object,
        received: p.parsedType
      }), C;
    }
    const { status: r, ctx: s } = this._processInputParams(e), { shape: a, keys: i } = this._getCached(), o = [];
    if (!(this._def.catchall instanceof Ue && this._def.unknownKeys === "strip"))
      for (const p in s.data)
        i.includes(p) || o.push(p);
    const d = [];
    for (const p of i) {
      const l = a[p], h = s.data[p];
      d.push({
        key: { status: "valid", value: p },
        value: l._parse(new we(s, h, s.path, p)),
        alwaysSet: p in s.data
      });
    }
    if (this._def.catchall instanceof Ue) {
      const p = this._def.unknownKeys;
      if (p === "passthrough")
        for (const l of o)
          d.push({
            key: { status: "valid", value: l },
            value: { status: "valid", value: s.data[l] }
          });
      else if (p === "strict")
        o.length > 0 && (w(s, {
          code: v.unrecognized_keys,
          keys: o
        }), r.dirty());
      else if (p !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const p = this._def.catchall;
      for (const l of o) {
        const h = s.data[l];
        d.push({
          key: { status: "valid", value: l },
          value: p._parse(
            new we(s, h, s.path, l)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: l in s.data
        });
      }
    }
    return s.common.async ? Promise.resolve().then(async () => {
      const p = [];
      for (const l of d) {
        const h = await l.key, f = await l.value;
        p.push({
          key: h,
          value: f,
          alwaysSet: l.alwaysSet
        });
      }
      return p;
    }).then((p) => se.mergeObjectSync(r, p)) : se.mergeObjectSync(r, d);
  }
  get shape() {
    return this._def.shape();
  }
  strict(e) {
    return k.errToObj, new W({
      ...this._def,
      unknownKeys: "strict",
      ...e !== void 0 ? {
        errorMap: (t, r) => {
          var a, i;
          const s = ((i = (a = this._def).errorMap) == null ? void 0 : i.call(a, t, r).message) ?? r.defaultError;
          return t.code === "unrecognized_keys" ? {
            message: k.errToObj(e).message ?? s
          } : {
            message: s
          };
        }
      } : {}
    });
  }
  strip() {
    return new W({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new W({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(e) {
    return new W({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...e
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(e) {
    return new W({
      unknownKeys: e._def.unknownKeys,
      catchall: e._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...e._def.shape()
      }),
      typeName: E.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(e, t) {
    return this.augment({ [e]: t });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(e) {
    return new W({
      ...this._def,
      catchall: e
    });
  }
  pick(e) {
    const t = {};
    for (const r of M.objectKeys(e))
      e[r] && this.shape[r] && (t[r] = this.shape[r]);
    return new W({
      ...this._def,
      shape: () => t
    });
  }
  omit(e) {
    const t = {};
    for (const r of M.objectKeys(this.shape))
      e[r] || (t[r] = this.shape[r]);
    return new W({
      ...this._def,
      shape: () => t
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return ot(this);
  }
  partial(e) {
    const t = {};
    for (const r of M.objectKeys(this.shape)) {
      const s = this.shape[r];
      e && !e[r] ? t[r] = s : t[r] = s.optional();
    }
    return new W({
      ...this._def,
      shape: () => t
    });
  }
  required(e) {
    const t = {};
    for (const r of M.objectKeys(this.shape))
      if (e && !e[r])
        t[r] = this.shape[r];
      else {
        let a = this.shape[r];
        for (; a instanceof Oe; )
          a = a._def.innerType;
        t[r] = a;
      }
    return new W({
      ...this._def,
      shape: () => t
    });
  }
  keyof() {
    return Us(M.objectKeys(this.shape));
  }
}
W.create = (n, e) => new W({
  shape: () => n,
  unknownKeys: "strip",
  catchall: Ue.create(),
  typeName: E.ZodObject,
  ...N(e)
});
W.strictCreate = (n, e) => new W({
  shape: () => n,
  unknownKeys: "strict",
  catchall: Ue.create(),
  typeName: E.ZodObject,
  ...N(e)
});
W.lazycreate = (n, e) => new W({
  shape: n,
  unknownKeys: "strip",
  catchall: Ue.create(),
  typeName: E.ZodObject,
  ...N(e)
});
class yn extends P {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = this._def.options;
    function s(a) {
      for (const o of a)
        if (o.result.status === "valid")
          return o.result;
      for (const o of a)
        if (o.result.status === "dirty")
          return t.common.issues.push(...o.ctx.common.issues), o.result;
      const i = a.map((o) => new Ne(o.ctx.common.issues));
      return w(t, {
        code: v.invalid_union,
        unionErrors: i
      }), C;
    }
    if (t.common.async)
      return Promise.all(r.map(async (a) => {
        const i = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await a._parseAsync({
            data: t.data,
            path: t.path,
            parent: i
          }),
          ctx: i
        };
      })).then(s);
    {
      let a;
      const i = [];
      for (const d of r) {
        const p = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        }, l = d._parseSync({
          data: t.data,
          path: t.path,
          parent: p
        });
        if (l.status === "valid")
          return l;
        l.status === "dirty" && !a && (a = { result: l, ctx: p }), p.common.issues.length && i.push(p.common.issues);
      }
      if (a)
        return t.common.issues.push(...a.ctx.common.issues), a.result;
      const o = i.map((d) => new Ne(d));
      return w(t, {
        code: v.invalid_union,
        unionErrors: o
      }), C;
    }
  }
  get options() {
    return this._def.options;
  }
}
yn.create = (n, e) => new yn({
  options: n,
  typeName: E.ZodUnion,
  ...N(e)
});
const ke = (n) => n instanceof xn ? ke(n.schema) : n instanceof nt ? ke(n.innerType()) : n instanceof bn ? [n.value] : n instanceof tt ? n.options : n instanceof ir ? M.objectValues(n.enum) : n instanceof kn ? ke(n._def.innerType) : n instanceof nr ? [void 0] : n instanceof rr ? [null] : n instanceof Oe ? [void 0, ...ke(n.unwrap())] : n instanceof rt ? [null, ...ke(n.unwrap())] : n instanceof Js || n instanceof In ? ke(n.unwrap()) : n instanceof Tn ? ke(n._def.innerType) : [];
class yr extends P {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== S.object)
      return w(t, {
        code: v.invalid_type,
        expected: S.object,
        received: t.parsedType
      }), C;
    const r = this.discriminator, s = t.data[r], a = this.optionsMap.get(s);
    return a ? t.common.async ? a._parseAsync({
      data: t.data,
      path: t.path,
      parent: t
    }) : a._parseSync({
      data: t.data,
      path: t.path,
      parent: t
    }) : (w(t, {
      code: v.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [r]
    }), C);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(e, t, r) {
    const s = /* @__PURE__ */ new Map();
    for (const a of t) {
      const i = ke(a.shape[e]);
      if (!i.length)
        throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);
      for (const o of i) {
        if (s.has(o))
          throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);
        s.set(o, a);
      }
    }
    return new yr({
      typeName: E.ZodDiscriminatedUnion,
      discriminator: e,
      options: t,
      optionsMap: s,
      ...N(r)
    });
  }
}
function ar(n, e) {
  const t = Pe(n), r = Pe(e);
  if (n === e)
    return { valid: !0, data: n };
  if (t === S.object && r === S.object) {
    const s = M.objectKeys(e), a = M.objectKeys(n).filter((o) => s.indexOf(o) !== -1), i = { ...n, ...e };
    for (const o of a) {
      const d = ar(n[o], e[o]);
      if (!d.valid)
        return { valid: !1 };
      i[o] = d.data;
    }
    return { valid: !0, data: i };
  } else if (t === S.array && r === S.array) {
    if (n.length !== e.length)
      return { valid: !1 };
    const s = [];
    for (let a = 0; a < n.length; a++) {
      const i = n[a], o = e[a], d = ar(i, o);
      if (!d.valid)
        return { valid: !1 };
      s.push(d.data);
    }
    return { valid: !0, data: s };
  } else return t === S.date && r === S.date && +n == +e ? { valid: !0, data: n } : { valid: !1 };
}
class vn extends P {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = (a, i) => {
      if (Yr(a) || Yr(i))
        return C;
      const o = ar(a.value, i.value);
      return o.valid ? ((Xr(a) || Xr(i)) && t.dirty(), { status: t.value, value: o.data }) : (w(r, {
        code: v.invalid_intersection_types
      }), C);
    };
    return r.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      }),
      this._def.right._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      })
    ]).then(([a, i]) => s(a, i)) : s(this._def.left._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }), this._def.right._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }));
  }
}
vn.create = (n, e, t) => new vn({
  left: n,
  right: e,
  typeName: E.ZodIntersection,
  ...N(t)
});
class et extends P {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== S.array)
      return w(r, {
        code: v.invalid_type,
        expected: S.array,
        received: r.parsedType
      }), C;
    if (r.data.length < this._def.items.length)
      return w(r, {
        code: v.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), C;
    !this._def.rest && r.data.length > this._def.items.length && (w(r, {
      code: v.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), t.dirty());
    const a = [...r.data].map((i, o) => {
      const d = this._def.items[o] || this._def.rest;
      return d ? d._parse(new we(r, i, r.path, o)) : null;
    }).filter((i) => !!i);
    return r.common.async ? Promise.all(a).then((i) => se.mergeArray(t, i)) : se.mergeArray(t, a);
  }
  get items() {
    return this._def.items;
  }
  rest(e) {
    return new et({
      ...this._def,
      rest: e
    });
  }
}
et.create = (n, e) => {
  if (!Array.isArray(n))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new et({
    items: n,
    typeName: E.ZodTuple,
    rest: null,
    ...N(e)
  });
};
class wn extends P {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== S.object)
      return w(r, {
        code: v.invalid_type,
        expected: S.object,
        received: r.parsedType
      }), C;
    const s = [], a = this._def.keyType, i = this._def.valueType;
    for (const o in r.data)
      s.push({
        key: a._parse(new we(r, o, r.path, o)),
        value: i._parse(new we(r, r.data[o], r.path, o)),
        alwaysSet: o in r.data
      });
    return r.common.async ? se.mergeObjectAsync(t, s) : se.mergeObjectSync(t, s);
  }
  get element() {
    return this._def.valueType;
  }
  static create(e, t, r) {
    return t instanceof P ? new wn({
      keyType: e,
      valueType: t,
      typeName: E.ZodRecord,
      ...N(r)
    }) : new wn({
      keyType: Ee.create(),
      valueType: e,
      typeName: E.ZodRecord,
      ...N(t)
    });
  }
}
class ns extends P {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== S.map)
      return w(r, {
        code: v.invalid_type,
        expected: S.map,
        received: r.parsedType
      }), C;
    const s = this._def.keyType, a = this._def.valueType, i = [...r.data.entries()].map(([o, d], p) => ({
      key: s._parse(new we(r, o, r.path, [p, "key"])),
      value: a._parse(new we(r, d, r.path, [p, "value"]))
    }));
    if (r.common.async) {
      const o = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const d of i) {
          const p = await d.key, l = await d.value;
          if (p.status === "aborted" || l.status === "aborted")
            return C;
          (p.status === "dirty" || l.status === "dirty") && t.dirty(), o.set(p.value, l.value);
        }
        return { status: t.value, value: o };
      });
    } else {
      const o = /* @__PURE__ */ new Map();
      for (const d of i) {
        const p = d.key, l = d.value;
        if (p.status === "aborted" || l.status === "aborted")
          return C;
        (p.status === "dirty" || l.status === "dirty") && t.dirty(), o.set(p.value, l.value);
      }
      return { status: t.value, value: o };
    }
  }
}
ns.create = (n, e, t) => new ns({
  valueType: e,
  keyType: n,
  typeName: E.ZodMap,
  ...N(t)
});
class Ot extends P {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== S.set)
      return w(r, {
        code: v.invalid_type,
        expected: S.set,
        received: r.parsedType
      }), C;
    const s = this._def;
    s.minSize !== null && r.data.size < s.minSize.value && (w(r, {
      code: v.too_small,
      minimum: s.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.minSize.message
    }), t.dirty()), s.maxSize !== null && r.data.size > s.maxSize.value && (w(r, {
      code: v.too_big,
      maximum: s.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.maxSize.message
    }), t.dirty());
    const a = this._def.valueType;
    function i(d) {
      const p = /* @__PURE__ */ new Set();
      for (const l of d) {
        if (l.status === "aborted")
          return C;
        l.status === "dirty" && t.dirty(), p.add(l.value);
      }
      return { status: t.value, value: p };
    }
    const o = [...r.data.values()].map((d, p) => a._parse(new we(r, d, r.path, p)));
    return r.common.async ? Promise.all(o).then((d) => i(d)) : i(o);
  }
  min(e, t) {
    return new Ot({
      ...this._def,
      minSize: { value: e, message: k.toString(t) }
    });
  }
  max(e, t) {
    return new Ot({
      ...this._def,
      maxSize: { value: e, message: k.toString(t) }
    });
  }
  size(e, t) {
    return this.min(e, t).max(e, t);
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
Ot.create = (n, e) => new Ot({
  valueType: n,
  minSize: null,
  maxSize: null,
  typeName: E.ZodSet,
  ...N(e)
});
class xn extends P {
  get schema() {
    return this._def.getter();
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    return this._def.getter()._parse({ data: t.data, path: t.path, parent: t });
  }
}
xn.create = (n, e) => new xn({
  getter: n,
  typeName: E.ZodLazy,
  ...N(e)
});
class bn extends P {
  _parse(e) {
    if (e.data !== this._def.value) {
      const t = this._getOrReturnCtx(e);
      return w(t, {
        received: t.data,
        code: v.invalid_literal,
        expected: this._def.value
      }), C;
    }
    return { status: "valid", value: e.data };
  }
  get value() {
    return this._def.value;
  }
}
bn.create = (n, e) => new bn({
  value: n,
  typeName: E.ZodLiteral,
  ...N(e)
});
function Us(n, e) {
  return new tt({
    values: n,
    typeName: E.ZodEnum,
    ...N(e)
  });
}
class tt extends P {
  _parse(e) {
    if (typeof e.data != "string") {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return w(t, {
        expected: M.joinValues(r),
        received: t.parsedType,
        code: v.invalid_type
      }), C;
    }
    if (this._cache || (this._cache = new Set(this._def.values)), !this._cache.has(e.data)) {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return w(t, {
        received: t.data,
        code: v.invalid_enum_value,
        options: r
      }), C;
    }
    return le(e.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Values() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  extract(e, t = this._def) {
    return tt.create(e, {
      ...this._def,
      ...t
    });
  }
  exclude(e, t = this._def) {
    return tt.create(this.options.filter((r) => !e.includes(r)), {
      ...this._def,
      ...t
    });
  }
}
tt.create = Us;
class ir extends P {
  _parse(e) {
    const t = M.getValidEnumValues(this._def.values), r = this._getOrReturnCtx(e);
    if (r.parsedType !== S.string && r.parsedType !== S.number) {
      const s = M.objectValues(t);
      return w(r, {
        expected: M.joinValues(s),
        received: r.parsedType,
        code: v.invalid_type
      }), C;
    }
    if (this._cache || (this._cache = new Set(M.getValidEnumValues(this._def.values))), !this._cache.has(e.data)) {
      const s = M.objectValues(t);
      return w(r, {
        received: r.data,
        code: v.invalid_enum_value,
        options: s
      }), C;
    }
    return le(e.data);
  }
  get enum() {
    return this._def.values;
  }
}
ir.create = (n, e) => new ir({
  values: n,
  typeName: E.ZodNativeEnum,
  ...N(e)
});
class Sn extends P {
  unwrap() {
    return this._def.type;
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== S.promise && t.common.async === !1)
      return w(t, {
        code: v.invalid_type,
        expected: S.promise,
        received: t.parsedType
      }), C;
    const r = t.parsedType === S.promise ? t.data : Promise.resolve(t.data);
    return le(r.then((s) => this._def.type.parseAsync(s, {
      path: t.path,
      errorMap: t.common.contextualErrorMap
    })));
  }
}
Sn.create = (n, e) => new Sn({
  type: n,
  typeName: E.ZodPromise,
  ...N(e)
});
class nt extends P {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === E.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = this._def.effect || null, a = {
      addIssue: (i) => {
        w(r, i), i.fatal ? t.abort() : t.dirty();
      },
      get path() {
        return r.path;
      }
    };
    if (a.addIssue = a.addIssue.bind(a), s.type === "preprocess") {
      const i = s.transform(r.data, a);
      if (r.common.async)
        return Promise.resolve(i).then(async (o) => {
          if (t.value === "aborted")
            return C;
          const d = await this._def.schema._parseAsync({
            data: o,
            path: r.path,
            parent: r
          });
          return d.status === "aborted" ? C : d.status === "dirty" || t.value === "dirty" ? kt(d.value) : d;
        });
      {
        if (t.value === "aborted")
          return C;
        const o = this._def.schema._parseSync({
          data: i,
          path: r.path,
          parent: r
        });
        return o.status === "aborted" ? C : o.status === "dirty" || t.value === "dirty" ? kt(o.value) : o;
      }
    }
    if (s.type === "refinement") {
      const i = (o) => {
        const d = s.refinement(o, a);
        if (r.common.async)
          return Promise.resolve(d);
        if (d instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return o;
      };
      if (r.common.async === !1) {
        const o = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return o.status === "aborted" ? C : (o.status === "dirty" && t.dirty(), i(o.value), { status: t.value, value: o.value });
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((o) => o.status === "aborted" ? C : (o.status === "dirty" && t.dirty(), i(o.value).then(() => ({ status: t.value, value: o.value }))));
    }
    if (s.type === "transform")
      if (r.common.async === !1) {
        const i = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        if (!wt(i))
          return C;
        const o = s.transform(i.value, a);
        if (o instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: t.value, value: o };
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((i) => wt(i) ? Promise.resolve(s.transform(i.value, a)).then((o) => ({
          status: t.value,
          value: o
        })) : C);
    M.assertNever(s);
  }
}
nt.create = (n, e, t) => new nt({
  schema: n,
  typeName: E.ZodEffects,
  effect: e,
  ...N(t)
});
nt.createWithPreprocess = (n, e, t) => new nt({
  schema: e,
  effect: { type: "preprocess", transform: n },
  typeName: E.ZodEffects,
  ...N(t)
});
class Oe extends P {
  _parse(e) {
    return this._getType(e) === S.undefined ? le(void 0) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Oe.create = (n, e) => new Oe({
  innerType: n,
  typeName: E.ZodOptional,
  ...N(e)
});
class rt extends P {
  _parse(e) {
    return this._getType(e) === S.null ? le(null) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
rt.create = (n, e) => new rt({
  innerType: n,
  typeName: E.ZodNullable,
  ...N(e)
});
class kn extends P {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    let r = t.data;
    return t.parsedType === S.undefined && (r = this._def.defaultValue()), this._def.innerType._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
kn.create = (n, e) => new kn({
  innerType: n,
  typeName: E.ZodDefault,
  defaultValue: typeof e.default == "function" ? e.default : () => e.default,
  ...N(e)
});
class Tn extends P {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = {
      ...t,
      common: {
        ...t.common,
        issues: []
      }
    }, s = this._def.innerType._parse({
      data: r.data,
      path: r.path,
      parent: {
        ...r
      }
    });
    return gn(s) ? s.then((a) => ({
      status: "valid",
      value: a.status === "valid" ? a.value : this._def.catchValue({
        get error() {
          return new Ne(r.common.issues);
        },
        input: r.data
      })
    })) : {
      status: "valid",
      value: s.status === "valid" ? s.value : this._def.catchValue({
        get error() {
          return new Ne(r.common.issues);
        },
        input: r.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
Tn.create = (n, e) => new Tn({
  innerType: n,
  typeName: E.ZodCatch,
  catchValue: typeof e.catch == "function" ? e.catch : () => e.catch,
  ...N(e)
});
class rs extends P {
  _parse(e) {
    if (this._getType(e) !== S.nan) {
      const r = this._getOrReturnCtx(e);
      return w(r, {
        code: v.invalid_type,
        expected: S.nan,
        received: r.parsedType
      }), C;
    }
    return { status: "valid", value: e.data };
  }
}
rs.create = (n) => new rs({
  typeName: E.ZodNaN,
  ...N(n)
});
class Js extends P {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = t.data;
    return this._def.type._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class vr extends P {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.common.async)
      return (async () => {
        const a = await this._def.in._parseAsync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return a.status === "aborted" ? C : a.status === "dirty" ? (t.dirty(), kt(a.value)) : this._def.out._parseAsync({
          data: a.value,
          path: r.path,
          parent: r
        });
      })();
    {
      const s = this._def.in._parseSync({
        data: r.data,
        path: r.path,
        parent: r
      });
      return s.status === "aborted" ? C : s.status === "dirty" ? (t.dirty(), {
        status: "dirty",
        value: s.value
      }) : this._def.out._parseSync({
        data: s.value,
        path: r.path,
        parent: r
      });
    }
  }
  static create(e, t) {
    return new vr({
      in: e,
      out: t,
      typeName: E.ZodPipeline
    });
  }
}
class In extends P {
  _parse(e) {
    const t = this._def.innerType._parse(e), r = (s) => (wt(s) && (s.value = Object.freeze(s.value)), s);
    return gn(t) ? t.then((s) => r(s)) : r(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
In.create = (n, e) => new In({
  innerType: n,
  typeName: E.ZodReadonly,
  ...N(e)
});
var E;
(function(n) {
  n.ZodString = "ZodString", n.ZodNumber = "ZodNumber", n.ZodNaN = "ZodNaN", n.ZodBigInt = "ZodBigInt", n.ZodBoolean = "ZodBoolean", n.ZodDate = "ZodDate", n.ZodSymbol = "ZodSymbol", n.ZodUndefined = "ZodUndefined", n.ZodNull = "ZodNull", n.ZodAny = "ZodAny", n.ZodUnknown = "ZodUnknown", n.ZodNever = "ZodNever", n.ZodVoid = "ZodVoid", n.ZodArray = "ZodArray", n.ZodObject = "ZodObject", n.ZodUnion = "ZodUnion", n.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", n.ZodIntersection = "ZodIntersection", n.ZodTuple = "ZodTuple", n.ZodRecord = "ZodRecord", n.ZodMap = "ZodMap", n.ZodSet = "ZodSet", n.ZodFunction = "ZodFunction", n.ZodLazy = "ZodLazy", n.ZodLiteral = "ZodLiteral", n.ZodEnum = "ZodEnum", n.ZodEffects = "ZodEffects", n.ZodNativeEnum = "ZodNativeEnum", n.ZodOptional = "ZodOptional", n.ZodNullable = "ZodNullable", n.ZodDefault = "ZodDefault", n.ZodCatch = "ZodCatch", n.ZodPromise = "ZodPromise", n.ZodBranded = "ZodBranded", n.ZodPipeline = "ZodPipeline", n.ZodReadonly = "ZodReadonly";
})(E || (E = {}));
const c = Ee.create, T = xt.create, It = tr.create, U = sr.create;
Ue.create;
const J = ve.create, g = W.create, Bs = yn.create, ce = yr.create;
vn.create;
et.create;
const ne = wn.create, ao = xn.create, m = bn.create, re = tt.create;
Sn.create;
Oe.create;
rt.create;
g({
  name: c(),
  description: c().optional(),
  inputSchema: g({
    type: m("object"),
    properties: ne(c(), U()),
    required: J(c()),
    additionalProperties: It()
  })
});
async function io(n, e = !1) {
  const t = [], r = /* @__PURE__ */ new Set();
  for (const s of n) {
    const a = await oo(s, e), o = [...new Set(a.map((d) => d.name))].filter((d) => r.has(d));
    if (o.length > 0)
      throw new Y(`Duplicate tool names found across MCP servers: ${o.join(", ")}`);
    for (const d of a)
      r.add(d.name), t.push(d);
  }
  return t;
}
const Gn = {};
async function oo(n, e) {
  return n.cacheToolsList && Gn[n.name] ? Gn[n.name] : Po(async (t) => {
    const r = await n.listTools();
    t.spanData.result = r.map((a) => a.name);
    const s = r.map((a) => co(a, n, e));
    return n.cacheToolsList && (Gn[n.name] = s), s;
  }, { data: { server: n.name } });
}
async function uo(n, e = !1) {
  return io(n, e);
}
function co(n, e, t) {
  var i, o, d, p;
  async function r(l, h) {
    let f = {};
    typeof l == "string" && l ? f = JSON.parse(l) : typeof l == "object" && l != null && (f = l);
    const x = Rt();
    x && (x.spanData.mcp_data = { server: e.name });
    const I = await e.callTool(n.name, f);
    return I.length === 1 ? I[0] : I;
  }
  const s = {
    type: ((i = n.inputSchema) == null ? void 0 : i.type) ?? "object",
    properties: ((o = n.inputSchema) == null ? void 0 : o.properties) ?? {},
    required: ((d = n.inputSchema) == null ? void 0 : d.required) ?? [],
    additionalProperties: ((p = n.inputSchema) == null ? void 0 : p.additionalProperties) ?? !1
  };
  if (t || s.additionalProperties === !0)
    try {
      const l = lo(s);
      return Kn({
        name: n.name,
        description: n.description || "",
        parameters: l,
        strict: !0,
        execute: r
      });
    } catch (l) {
      A.warn(`Error converting MCP schema to strict mode: ${l}`);
    }
  const a = {
    ...s,
    additionalProperties: !0
  };
  return Kn({
    name: n.name,
    description: n.description || "",
    parameters: a,
    strict: !1,
    execute: r
  });
}
function lo(n) {
  const e = {
    ...n,
    additionalProperties: !1
  };
  return e.required || (e.required = []), e;
}
function po() {
  return {};
}
var dt;
class Rn {
  constructor() {
    b(this, dt, new EventTarget());
  }
  on(e, t) {
    return u(this, dt).addEventListener(e, (r) => t(...r.detail ?? [])), this;
  }
  off(e, t) {
    return u(this, dt).removeEventListener(e, (r) => t(...r.detail ?? [])), this;
  }
  emit(e, ...t) {
    const r = new CustomEvent(e, { detail: t });
    return u(this, dt).dispatchEvent(r);
  }
  once(e, t) {
    const r = (...s) => {
      this.off(e, r), t(...s);
    };
    return this.on(e, r), this;
  }
}
dt = new WeakMap();
const Gs = crypto.randomUUID.bind(crypto), fo = class {
  constructor() {
  }
  pipeTo(e, t) {
  }
  pipeThrough(e, t) {
  }
}, ho = globalThis.ReadableStream, mo = globalThis.TransformStream;
class go {
  constructor() {
    _(this, "context", null);
  }
  run(e, t) {
    return this.context = e, t();
  }
  getStore() {
    return this.context;
  }
  enterWith() {
  }
}
class _o {
  constructor() {
  }
  setTimeout(e, t) {
    const r = setTimeout(e, t);
    return r.ref = typeof r.ref == "function" ? r.ref : () => r, r.unref = typeof r.unref == "function" ? r.unref : () => r, r.hasRef = typeof r.hasRef == "function" ? r.hasRef : () => !0, r.refresh = typeof r.refresh == "function" ? r.refresh : () => r, r;
  }
  clearTimeout(e) {
    window.clearTimeout(e);
  }
}
const yo = new _o();
let ss;
function xe() {
  return ss ?? (ss = new go()), ss;
}
function Nt() {
  const n = xe().getStore();
  return n != null && n.trace ? n.trace : null;
}
function Rt() {
  const n = xe().getStore();
  return n != null && n.span ? n.span : null;
}
function Vs(n) {
  return async () => {
    const e = Nt();
    if (!e)
      throw new Error("No trace found");
    await e.start();
    const t = await n(e);
    return await e.end(), t;
  };
}
async function vo(n, e, t = {}) {
  const r = typeof n == "string" ? be().createTrace({
    ...t,
    name: n
  }) : n;
  return xe().run({ trace: r }, Vs(e));
}
async function wo(n, e = {}) {
  if (Nt())
    return await n();
  const r = be().createTrace(e);
  return xe().run({ trace: r }, Vs(n));
}
function cn(n) {
  const e = xe().getStore();
  if (!e)
    throw new Error("No existing trace found");
  e.span && (e.span.previousSpan = e.previousSpan, e.previousSpan = e.span), e.span = n, xe().enterWith(e);
}
function Tt() {
  var e;
  const n = xe().getStore();
  n && (n.span = n.previousSpan, n.previousSpan = (e = n.previousSpan) == null ? void 0 : e.previousSpan, xe().enterWith(n));
}
function Dt(n) {
  const e = Rt();
  e && e.setError(n);
}
function xo(n) {
  var e, t, r;
  return {
    trace: (e = n.trace) == null ? void 0 : e.clone(),
    span: (t = n.span) == null ? void 0 : t.clone(),
    previousSpan: (r = n.previousSpan) == null ? void 0 : r.clone()
  };
}
function or(n) {
  const e = xe().getStore();
  if (!e)
    throw new Error("No existing trace found");
  const t = xo(e);
  return xe().run(t, n);
}
class bo {
  async export(e) {
    if (Zs.disabled) {
      A.debug("Tracing is disabled. Skipping export");
      return;
    }
    for (const t of e)
      t.type === "trace" ? console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}`) : console.log(`[Exporter] Export span: ${JSON.stringify(t)}`);
  }
}
var Mt, lt, $t, Ft, pt, K, Ie, je, Ze, Lt, ue, ur, zs, ut;
class So {
  constructor(e, {
    maxQueueSize: t = 1e3,
    maxBatchSize: r = 100,
    scheduleDelay: s = 5e3,
    // 5 seconds
    exportTriggerRatio: a = 0.8
  } = {}) {
    b(this, ue);
    b(this, Mt);
    b(this, lt);
    b(this, $t);
    b(this, Ft);
    b(this, pt);
    b(this, K, []);
    b(this, Ie);
    b(this, je, null);
    b(this, Ze, !1);
    b(this, Lt, new AbortController());
    y(this, Mt, t), y(this, lt, r), y(this, $t, s), y(this, Ft, t * a), y(this, pt, e), y(this, Ie, yo), A.warn("BatchTraceProcessor is not supported in the browser. Traces will not be exported.");
  }
  async onTraceStart(e) {
    await j(this, ue, ur).call(this, e);
  }
  async onTraceEnd(e) {
  }
  async onSpanStart(e) {
  }
  async onSpanEnd(e) {
    await j(this, ue, ur).call(this, e);
  }
  async shutdown(e) {
    for (e && u(this, Ie).setTimeout(() => {
      u(this, Lt).abort();
    }, e), A.debug("Shutting down gracefully"); u(this, K).length > 0; ) {
      if (A.debug(`Waiting for buffer to empty. Items left: ${u(this, K).length}`), u(this, Ze) || await j(this, ue, ut).call(this, !0), u(this, Lt).signal.aborted) {
        A.debug("Timeout reached, force flushing"), await j(this, ue, ut).call(this, !0);
        break;
      }
      await new Promise((t) => u(this, Ie).setTimeout(t, 500));
    }
    A.debug("Buffer empty. Exiting"), u(this, Ie) && u(this, je) && u(this, Ie).clearTimeout(u(this, je));
  }
  async forceFlush() {
    u(this, K).length > 0 && await j(this, ue, ut).call(this, !0);
  }
}
Mt = new WeakMap(), lt = new WeakMap(), $t = new WeakMap(), Ft = new WeakMap(), pt = new WeakMap(), K = new WeakMap(), Ie = new WeakMap(), je = new WeakMap(), Ze = new WeakMap(), Lt = new WeakMap(), ue = new WeakSet(), ur = async function(e) {
  if (u(this, K).length + 1 > u(this, Mt)) {
    A.error("Dropping trace because buffer is full");
    return;
  }
  u(this, K).push(e), u(this, K).length > u(this, Ft) && await j(this, ue, ut).call(this);
}, zs = function() {
  y(this, je, u(this, Ie).setTimeout(async () => {
    await j(this, ue, ut).call(this), j(this, ue, zs).call(this);
  }, u(this, $t))), typeof u(this, je).unref == "function" && u(this, je).unref();
}, ut = async function(e = !1) {
  if (u(this, K).length !== 0) {
    if (A.debug(`Exporting batches. Force: ${e}. Buffer size: ${u(this, K).length}`), e || u(this, K).length < u(this, lt)) {
      const t = [...u(this, K)];
      y(this, K, []), y(this, Ze, !0), await u(this, pt).export(t), y(this, Ze, !1);
    } else if (u(this, K).length > 0) {
      const t = u(this, K).splice(0, u(this, lt));
      y(this, Ze, !0), await u(this, pt).export(t), y(this, Ze, !1);
    }
  }
};
var de;
class ko {
  constructor() {
    b(this, de, []);
  }
  addTraceProcessor(e) {
    u(this, de).push(e);
  }
  setProcessors(e) {
    A.debug("Shutting down old processors");
    for (const t of u(this, de))
      t.shutdown();
    y(this, de, e);
  }
  async onTraceStart(e) {
    for (const t of u(this, de))
      await t.onTraceStart(e);
  }
  async onTraceEnd(e) {
    for (const t of u(this, de))
      await t.onTraceEnd(e);
  }
  async onSpanStart(e) {
    for (const t of u(this, de))
      await t.onSpanStart(e);
  }
  async onSpanEnd(e) {
    for (const t of u(this, de))
      await t.onSpanEnd(e);
  }
  async shutdown(e) {
    for (const t of u(this, de))
      await t.shutdown(e);
  }
  async forceFlush() {
    for (const e of u(this, de))
      await e.forceFlush();
  }
}
de = new WeakMap();
let Vn = null, zn = null;
function To() {
  return Vn || (Vn = new bo()), Vn;
}
function qs() {
  return zn || (zn = new So(To())), zn;
}
function as() {
  return (/* @__PURE__ */ new Date()).toISOString();
}
function Ws() {
  return `trace_${Gs().replace(/-/g, "")}`;
}
function Io() {
  return `span_${Gs().replace(/-/g, "").slice(0, 24)}`;
}
function Ao(n) {
  return Object.fromEntries(Object.entries(n).filter(([e]) => !e.startsWith("_")));
}
var Ut, Jt, Bt, Gt, Ve, Me, $e, ze, Vt;
const Or = class Or {
  constructor(e, t) {
    _(this, "type", "trace.span");
    b(this, Ut);
    b(this, Jt);
    b(this, Bt);
    b(this, Gt);
    b(this, Ve);
    b(this, Me);
    b(this, $e);
    b(this, ze);
    b(this, Vt);
    y(this, Jt, e.traceId), y(this, Bt, e.spanId ?? Io()), y(this, Ut, e.data), y(this, Ve, t), y(this, Gt, e.parentId ?? null), y(this, ze, e.error ?? null), y(this, Me, e.startedAt ?? null), y(this, $e, e.endedAt ?? null);
  }
  get traceId() {
    return u(this, Jt);
  }
  get spanData() {
    return u(this, Ut);
  }
  get spanId() {
    return u(this, Bt);
  }
  get parentId() {
    return u(this, Gt);
  }
  get previousSpan() {
    return u(this, Vt);
  }
  set previousSpan(e) {
    y(this, Vt, e);
  }
  start() {
    if (u(this, Me)) {
      A.warn("Span already started");
      return;
    }
    y(this, Me, as()), u(this, Ve).onSpanStart(this);
  }
  end() {
    if (u(this, $e)) {
      A.debug("Span already finished", this.spanData);
      return;
    }
    y(this, $e, as()), u(this, Ve).onSpanEnd(this);
  }
  setError(e) {
    y(this, ze, e);
  }
  get error() {
    return u(this, ze);
  }
  get startedAt() {
    return u(this, Me);
  }
  get endedAt() {
    return u(this, $e);
  }
  clone() {
    var t;
    const e = new Or({
      traceId: this.traceId,
      spanId: this.spanId,
      parentId: this.parentId ?? void 0,
      data: this.spanData,
      startedAt: u(this, Me) ?? void 0,
      endedAt: u(this, $e) ?? void 0,
      error: u(this, ze) ?? void 0
    }, u(this, Ve));
    return e.previousSpan = (t = this.previousSpan) == null ? void 0 : t.clone(), e;
  }
  toJSON() {
    return {
      object: this.type,
      id: this.spanId,
      trace_id: this.traceId,
      parent_id: this.parentId,
      started_at: this.startedAt,
      ended_at: this.endedAt,
      span_data: Ao(this.spanData),
      error: this.error
    };
  }
};
Ut = new WeakMap(), Jt = new WeakMap(), Bt = new WeakMap(), Gt = new WeakMap(), Ve = new WeakMap(), Me = new WeakMap(), $e = new WeakMap(), ze = new WeakMap(), Vt = new WeakMap();
let Pt = Or;
class Re extends Pt {
  constructor(e, t) {
    super({ traceId: "no-op", spanId: "no-op", data: e }, t);
  }
  start() {
  }
  end() {
  }
  setError() {
  }
  toJSON() {
    return null;
  }
}
var ft, Ae;
const Nr = class Nr {
  constructor(e, t) {
    _(this, "type", "trace");
    _(this, "traceId");
    _(this, "name");
    _(this, "groupId", null);
    _(this, "metadata");
    b(this, ft);
    b(this, Ae);
    this.traceId = e.traceId ?? Ws(), this.name = e.name ?? "Agent workflow", this.groupId = e.groupId ?? null, this.metadata = e.metadata ?? {}, y(this, ft, t ?? qs()), y(this, Ae, e.started ?? !1);
  }
  async start() {
    u(this, Ae) || (y(this, Ae, !0), await u(this, ft).onTraceStart(this));
  }
  async end() {
    u(this, Ae) && (y(this, Ae, !1), await u(this, ft).onTraceEnd(this));
  }
  clone() {
    return new Nr({
      traceId: this.traceId,
      name: this.name,
      groupId: this.groupId ?? void 0,
      metadata: this.metadata,
      started: u(this, Ae)
    });
  }
  toJSON() {
    return {
      object: this.type,
      id: this.traceId,
      workflow_name: this.name,
      group_id: this.groupId,
      metadata: this.metadata
    };
  }
};
ft = new WeakMap(), Ae = new WeakMap();
let jt = Nr;
class qn extends jt {
  constructor() {
    super({});
  }
  async start() {
  }
  async end() {
  }
  toJSON() {
    return null;
  }
}
var te, Fe, On, Hs;
class Co {
  constructor() {
    b(this, On);
    b(this, te);
    b(this, Fe);
    y(this, te, new ko()), y(this, Fe, Zs.disabled), js().NODE_ENV === "test" && y(this, Fe, !0), j(this, On, Hs).call(this);
  }
  /**
   * Add a processor to the list of processors. Each processor will receive all traces/spans.
   *
   * @param processor - The processor to add.
   */
  registerProcessor(e) {
    u(this, te).addTraceProcessor(e);
  }
  /**
   * Set the list of processors. This will replace any existing processors.
   *
   * @param processors - The list of processors to set.
   */
  setProcessors(e) {
    u(this, te).setProcessors(e);
  }
  /**
   * Get the current trace.
   *
   * @returns The current trace.
   */
  getCurrentTrace() {
    return Nt();
  }
  getCurrentSpan() {
    return Rt();
  }
  setDisabled(e) {
    y(this, Fe, e);
  }
  createTrace(e) {
    if (u(this, Fe))
      return A.debug("Tracing is disabled, Not creating trace %o", e), new qn();
    const t = e.traceId ?? Ws(), r = e.name ?? "Agent workflow";
    return A.debug("Creating trace %s with name %s", t, r), new jt({ ...e, name: r, traceId: t }, u(this, te));
  }
  createSpan(e, t) {
    if (u(this, Fe) || e.disabled)
      return A.debug("Tracing is disabled, Not creating span %o", e), new Re(e.data, u(this, te));
    let r, s;
    if (t) {
      if (t instanceof jt) {
        if (t instanceof qn)
          return A.debug("Parent trace is no-op, returning NoopSpan"), new Re(e.data, u(this, te));
        s = t.traceId;
      } else if (t instanceof Pt) {
        if (t instanceof Re)
          return A.debug("Parent span is no-op, returning NoopSpan"), new Re(e.data, u(this, te));
        r = t.spanId, s = t.traceId;
      }
    } else {
      const a = Nt(), i = Rt();
      if (!a)
        return A.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new Re(e.data, u(this, te));
      if (i instanceof Re || a instanceof qn)
        return A.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`), new Re(e.data, u(this, te));
      s = a.traceId, i ? (A.debug("Using parent span %s", i.spanId), r = i.spanId) : A.debug("No parent span, using current trace %s", a.traceId);
    }
    return s ? (A.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId ?? s}`), new Pt({
      ...e,
      traceId: s,
      parentId: r
    }, u(this, te))) : (A.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new Re(e.data, u(this, te)));
  }
  async shutdown(e) {
    try {
      A.debug("Shutting down tracing provider"), await u(this, te).shutdown(e);
    } catch (t) {
      A.error("Error shutting down tracing provider %o", t);
    }
  }
}
te = new WeakMap(), Fe = new WeakMap(), On = new WeakSet(), /** Adds listeners to `process` to ensure `shutdown` occurs before exit. */
Hs = function() {
  if (typeof process < "u" && typeof process.on == "function") {
    const e = async () => {
      const t = setTimeout(() => {
        console.warn("Cleanup timeout, forcing exit"), process.exit(1);
      }, 5e3);
      try {
        await this.shutdown();
      } finally {
        clearTimeout(t);
      }
    };
    process.on("beforeExit", e), process.on("SIGINT", async () => {
      await e(), process.exit(130);
    }), process.on("SIGTERM", async () => {
      await e(), process.exit(0);
    }), process.on("unhandledRejection", async (t, r) => {
      A.error("Unhandled rejection", t, r), await e(), process.exit(1);
    });
  }
};
let Wn;
function be() {
  return Wn || (Wn = new Co()), Wn;
}
function Dn(n) {
  return async (e, ...t) => or(async () => {
    const r = n(...t);
    cn(r);
    try {
      return r.start(), await e(r);
    } catch (s) {
      throw r.setError({
        message: s.message,
        data: s.data
      }), s;
    } finally {
      r.end(), Tt();
    }
  });
}
function is(n, e) {
  var t;
  return be().createSpan({
    ...n,
    data: {
      type: "agent",
      name: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.name) ?? "Agent",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
function Eo(n, e) {
  var t, r;
  return be().createSpan({
    ...n,
    data: {
      type: "function",
      input: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.input) ?? "",
      output: ((r = n == null ? void 0 : n.data) == null ? void 0 : r.output) ?? "",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const os = Dn(Eo);
function Oo(n, e) {
  return be().createSpan({
    ...n,
    data: { type: "handoff", ...n == null ? void 0 : n.data }
  }, e);
}
const No = Dn(Oo);
function Ro(n, e) {
  return be().createSpan({
    ...n,
    data: {
      type: "guardrail",
      triggered: !1,
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const us = Dn(Ro);
function Do(n, e) {
  return be().createSpan({
    ...n,
    data: {
      type: "mcp_tools",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Po = Dn(Do);
function jo(n) {
  be().registerProcessor(n);
}
class wr {
  on(e, t) {
    return this.eventEmitter.on(e, t), this.eventEmitter;
  }
  off(e, t) {
    return this.eventEmitter.off(e, t), this.eventEmitter;
  }
  emit(e, ...t) {
    return this.eventEmitter.emit(e, ...t);
  }
  once(e, t) {
    return this.eventEmitter.once(e, t), this.eventEmitter;
  }
}
class Zo extends wr {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new Rn());
  }
}
class Mo extends wr {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new Rn());
  }
}
function cs({ name: n, execute: e }) {
  return {
    type: "input",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "input", name: n },
        output: await e(t)
      };
    }
  };
}
function cr({ name: n, execute: e }) {
  return {
    type: "output",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "output", name: n },
        agent: t.agent,
        agentOutput: t.agentOutput,
        output: await e(t)
      };
    }
  };
}
function Ys(n) {
  return JSON.stringify({ assistant: n.name });
}
function $o(n) {
  return `transfer_to_${mn(n.name)}`;
}
function Fo(n) {
  return `Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription ?? ""}`;
}
class Xs {
  constructor(e, t) {
    /**
     * The name of the tool that represents the handoff.
     */
    _(this, "toolName");
    /**
     * The description of the tool that represents the handoff.
     */
    _(this, "toolDescription");
    /**
     * The JSON schema for the handoff input. Can be empty if the handoff does not take an input
     */
    _(this, "inputJsonSchema", {
      type: "object",
      properties: {},
      required: [],
      additionalProperties: !1
    });
    /**
     * Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to
     * true, as it increases the likelihood of correct JSON input.
     */
    _(this, "strictJsonSchema", !0);
    /**
     * The function that invokes the handoff. The parameters passed are:
     * 1. The handoff run context
     * 2. The arugments from the LLM, as a JSON string. Empty string if inputJsonSchema is empty.
     *
     * Must return an agent
     */
    _(this, "onInvokeHandoff");
    /**
     * The name of the agent that is being handed off to.
     */
    _(this, "agentName");
    /**
     * A function that filters the inputs that are passed to the next agent. By default, the new agent
     * sees the entire conversation history. In some cases, you may want to filter inputs e.g. to
     * remove older inputs, or remove tools from existing inputs.
     *
     * The function will receive the entire conversation hisstory so far, including the input item
     * that triggered the handoff and a tool call output item representing the handoff tool's output.
     *
     * You are free to modify the input history or new items as you see fit. The next agent that runs
     * will receive `handoffInputData.allItems
     */
    _(this, "inputFilter");
    /**
     * The agent that is being handed off to.
     */
    _(this, "agent");
    this.agentName = e.name, this.onInvokeHandoff = t, this.toolName = $o(e), this.toolDescription = Fo(e), this.agent = e;
  }
  /**
   * Returns a function tool definition that can be used to invoke the handoff.
   */
  getHandoffAsFunctionTool() {
    return {
      type: "function",
      name: this.toolName,
      description: this.toolDescription,
      parameters: this.inputJsonSchema,
      strict: this.strictJsonSchema
    };
  }
}
function Qs(n, e = {}) {
  let t;
  const r = !!e.onHandoff, s = !!e.inputType;
  if (!(r === s))
    throw new Y("You must provide either both `onHandoff` and `inputType` or neither.");
  async function i(d, p) {
    var l;
    if (t) {
      if (!p)
        throw Dt({
          message: `Handoff function expected non empty input but got: ${p}`,
          data: {
            details: "input is empty"
          }
        }), new me("Handoff function expected non empty input");
      try {
        const h = await t(p);
        e.onHandoff && await e.onHandoff(d, h);
      } catch (h) {
        throw Dt({
          message: "Invalid JSON provided",
          data: {}
        }), A.dontLogToolData || A.error(`Invalid JSON when parsing: ${p}. Error: ${h}`), new me("Invalid JSON provided");
      }
    } else
      await ((l = e.onHandoff) == null ? void 0 : l.call(e, d));
    return n;
  }
  const o = new Xs(n, i);
  if (e.inputType) {
    const d = _r(e.inputType, o.toolName);
    o.inputJsonSchema = d.schema, o.strictJsonSchema = !0, t = d.parser;
  }
  return e.toolNameOverride && (o.toolName = e.toolNameOverride), e.toolDescriptionOverride && (o.toolDescription = e.toolDescriptionOverride), e.inputFilter && (o.inputFilter = e.inputFilter), o;
}
function An(n) {
  return n instanceof Xs ? n : Qs(n);
}
function Lo() {
  throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.");
}
const X = g({
  /**
   * Additional optional provider specific data. Used for custom functionality or model provider
   * specific fields.
   */
  providerData: ne(c(), U()).optional()
}), at = X.extend({
  /**
   * An ID to identify the item. This is optional by default. If a model provider absolutely
   * requires this field, it will be validated on the model level.
   */
  id: c().optional()
}), Uo = X.extend({
  type: m("refusal"),
  /**
   * The refusal explanation from the model.
   */
  refusal: c()
}), Jo = X.extend({
  type: m("output_text"),
  /**
   * The text output from the model.
   */
  text: c()
}), xr = X.extend({
  type: m("input_text"),
  /**
   * A text input for example a message from a user
   */
  text: c()
}), Bo = X.extend({
  type: m("input_image"),
  /**
   * The image input to the model. Could be a URL, base64 or an object with a file ID.
   */
  image: c().or(g({
    id: c()
  })).describe("Could be a URL, base64 or an object with a file ID.")
}), Go = X.extend({
  type: m("input_file"),
  /**
   * The file input to the model. Could be a URL, base64 or an object with a file ID.
   */
  file: c().or(g({
    id: c()
  })).describe("Contents of the file or an object with a file ID.")
}), Ks = X.extend({
  type: m("audio"),
  /**
   * The audio input to the model. Could be base64 encoded audio data or an object with a file ID.
   */
  audio: c().or(g({
    id: c()
  })).describe("Base64 encoded audio data or file id"),
  /**
   * The format of the audio.
   */
  format: c().nullable().optional(),
  /**
   * The transcript of the audio.
   */
  transcript: c().nullable().optional()
}), Vo = X.extend({
  type: m("image"),
  /**
   * The image input to the model. Could be base64 encoded image data or an object with a file ID.
   */
  image: c().describe("Base64 encoded image data")
}), zo = X.extend({
  type: m("text"),
  /**
   * The text output from the model.
   */
  text: c()
}), qo = X.extend({
  type: m("image"),
  /**
   * The image data. Could be base64 encoded image data or an object with a file ID.
   */
  data: c().describe("Base64 encoded image data"),
  /**
   * The media type of the image.
   */
  mediaType: c().describe("IANA media type of the image")
}), Wo = X.extend({
  type: m("computer_screenshot"),
  /**
   * A base64 encoded image data or a URL representing the screenshot.
   */
  data: c().describe("Base64 encoded image data or URL")
}), Ho = ce("type", [
  g({ type: m("screenshot") }),
  g({
    type: m("click"),
    x: T(),
    y: T(),
    button: re(["left", "right", "wheel", "back", "forward"])
  }),
  g({
    type: m("double_click"),
    x: T(),
    y: T()
  }),
  g({
    type: m("scroll"),
    x: T(),
    y: T(),
    scroll_x: T(),
    scroll_y: T()
  }),
  g({
    type: m("type"),
    text: c()
  }),
  g({ type: m("wait") }),
  g({
    type: m("move"),
    x: T(),
    y: T()
  }),
  g({
    type: m("keypress"),
    keys: J(c())
  }),
  g({
    type: m("drag"),
    path: J(g({ x: T(), y: T() }))
  })
]), Yo = ce("type", [
  Jo,
  Uo,
  xr,
  Ks,
  Vo
]), br = at.extend({
  /**
   * Any item without a type is treated as a message
   */
  type: m("message").optional()
}), Pn = br.extend({
  /**
   * Representing a message from the assistant (i.e. the model)
   */
  role: m("assistant"),
  /**
   * The status of the message.
   */
  status: re(["in_progress", "completed", "incomplete"]),
  /**
   * The content of the message.
   */
  content: J(Yo)
}), Xo = ce("type", [
  xr,
  Bo,
  Go,
  Ks
]), ea = br.extend({
  // type: z.literal('message'),
  /**
   * Representing a message from the user
   */
  role: m("user"),
  /**
   * The content of the message.
   */
  content: J(Xo).or(c())
}), ta = br.extend({
  // type: z.literal('message'),
  /**
   * Representing a system message to the user
   */
  role: m("system"),
  /**
   * The content of the message.
   */
  content: c()
});
ce("role", [
  ta,
  Pn,
  ea
]);
const jn = at.extend({
  type: m("hosted_tool_call"),
  /**
   * The name of the hosted tool. For example `web_search_call` or `file_search_call`
   */
  name: c().describe("The name of the hosted tool"),
  /**
   * The status of the tool call.
   */
  status: c().optional(),
  /**
   * The primary output of the tool call. Additional output might be in the `providerData` field.
   */
  output: c().optional()
}), Zt = at.extend({
  type: m("function_call"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: c().describe("The ID of the tool call"),
  /**
   * The name of the function.
   */
  name: c().describe("The name of the function"),
  /**
   * The status of the function call.
   */
  status: re(["in_progress", "completed", "incomplete"]).optional(),
  /**
   * The arguments of the function call.
   */
  arguments: c()
}), dr = at.extend({
  type: m("function_call_result"),
  /**
   * The name of the tool that was called
   */
  name: c().describe("The name of the tool"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: c().describe("The ID of the tool call"),
  /**
   * The status of the tool call.
   */
  status: re(["in_progress", "completed", "incomplete"]),
  /**
   * The output of the tool call.
   */
  output: ce("type", [zo, qo])
}), Sr = at.extend({
  type: m("computer_call"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: c().describe("The ID of the computer call"),
  /**
   * The status of the computer call.
   */
  status: re(["in_progress", "completed", "incomplete"]),
  /**
   * The action to be performed by the computer.
   */
  action: Ho
}), Qo = at.extend({
  type: m("computer_call_result"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: c().describe("The ID of the computer call"),
  /**
   * The output of the computer call.
   */
  output: Wo
}), Ko = ce("type", [
  Sr,
  Zt,
  jn
]), kr = X.extend({
  id: c().optional(),
  type: m("reasoning"),
  /**
   * The user facing representation of the reasoning. Additional information might be in the `providerData` field.
   */
  content: J(xr)
}), na = at.extend({
  type: m("unknown")
}), Tr = ce("type", [
  Pn,
  jn,
  Zt,
  Sr,
  kr,
  na
]), eu = Bs([
  ea,
  Pn,
  ta,
  jn,
  Zt,
  Sr,
  dr,
  Qo,
  kr,
  na
]), tu = g({
  requests: T().optional(),
  inputTokens: T(),
  outputTokens: T(),
  totalTokens: T(),
  inputTokensDetails: ne(c(), T()).optional(),
  outputTokensDetails: ne(c(), T()).optional()
}), ra = X.extend({
  type: m("output_text_delta"),
  /**
   * The delta text that was streamed by the modelto the user.
   */
  delta: c()
}), nu = X.extend({
  type: m("response_started")
}), sa = X.extend({
  type: m("response_done"),
  /**
   * The response from the model.
   */
  response: X.extend({
    /**
     * The ID of the response.
     */
    id: c(),
    /**
     * The usage data for the response.
     */
    usage: tu,
    /**
     * The output from the model.
     */
    output: J(Tr)
  })
}), ru = X.extend({
  type: m("model"),
  event: U().describe("The event from the model")
});
ce("type", [
  ra,
  sa,
  nu,
  ru
]);
class Zn {
  constructor(e) {
    /**
     * The number of requests made to the LLM API.
     */
    _(this, "requests");
    /**
     * The number of input tokens used across all requests.
     */
    _(this, "inputTokens");
    /**
     * The number of output tokens used across all requests.
     */
    _(this, "outputTokens");
    /**
     * The total number of tokens sent and received, across all requests.
     */
    _(this, "totalTokens");
    /**
     * Details about the input tokens used across all requests.
     */
    _(this, "inputTokensDetails", []);
    /**
     * Details about the output tokens used across all requests.
     */
    _(this, "outputTokensDetails", []);
    typeof e > "u" ? (this.requests = 0, this.inputTokens = 0, this.outputTokens = 0, this.totalTokens = 0, this.inputTokensDetails = [], this.outputTokensDetails = []) : (this.requests = (e == null ? void 0 : e.requests) ?? 1, this.inputTokens = (e == null ? void 0 : e.inputTokens) ?? 0, this.outputTokens = (e == null ? void 0 : e.outputTokens) ?? 0, this.totalTokens = (e == null ? void 0 : e.totalTokens) ?? 0, this.inputTokensDetails = e != null && e.inputTokensDetails ? [e.inputTokensDetails] : [], this.outputTokensDetails = e != null && e.outputTokensDetails ? [e.outputTokensDetails] : []);
  }
  add(e) {
    this.requests += e.requests, this.inputTokens += e.inputTokens, this.outputTokens += e.outputTokens, this.totalTokens += e.totalTokens, this.inputTokensDetails.push(...e.inputTokensDetails), this.outputTokensDetails.push(...e.outputTokensDetails);
  }
}
var ie;
class ct {
  constructor(e = {}) {
    /**
     * The context object passed by you to the `Runner.run()`
     */
    _(this, "context");
    /**
     * The usage of the agent run so far. For streamed responses, the usage will be stale until the
     * last chunk of the stream is processed.
     */
    _(this, "usage");
    /**
     * A map of tool names to whether they have been approved.
     */
    b(this, ie);
    this.context = e, this.usage = new Zn(), y(this, ie, /* @__PURE__ */ new Map());
  }
  /**
   * Rebuild the approvals map from a serialized state.
   * @internal
   *
   * @param approvals - The approvals map to rebuild.
   */
  _rebuildApprovals(e) {
    y(this, ie, new Map(Object.entries(e)));
  }
  /**
   * Check if a tool call has been approved.
   *
   * @param toolName - The name of the tool.
   * @param callId - The call ID of the tool call.
   * @returns `true` if the tool call has been approved, `false` if blocked and `undefined` if not yet approved or rejected.
   */
  isToolApproved({ toolName: e, callId: t }) {
    const r = u(this, ie).get(e);
    if ((r == null ? void 0 : r.approved) === !0 && r.rejected === !0)
      return A.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"), !0;
    if ((r == null ? void 0 : r.approved) === !0)
      return !0;
    if ((r == null ? void 0 : r.rejected) === !0)
      return !1;
    const s = Array.isArray(r == null ? void 0 : r.approved) ? r.approved.includes(t) : !1, a = Array.isArray(r == null ? void 0 : r.rejected) ? r.rejected.includes(t) : !1;
    if (s && a)
      return A.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`), !0;
    if (s)
      return !0;
    if (a)
      return !1;
  }
  /**
   * Approve a tool call.
   *
   * @param toolName - The name of the tool.
   * @param callId - The call ID of the tool call.
   */
  approveTool(e, { alwaysApprove: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      u(this, ie).set(r, {
        approved: !0,
        rejected: []
      });
      return;
    }
    const s = u(this, ie).get(r) ?? {
      approved: [],
      rejected: []
    };
    Array.isArray(s.approved) && s.approved.push(e.rawItem.callId), u(this, ie).set(r, s);
  }
  /**
   * Reject a tool call.
   *
   * @param approvalItem - The tool approval item to reject.
   */
  rejectTool(e, { alwaysReject: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      u(this, ie).set(r, {
        approved: !1,
        rejected: !0
      });
      return;
    }
    const s = u(this, ie).get(r) ?? {
      approved: [],
      rejected: []
    };
    Array.isArray(s.rejected) && s.rejected.push(e.rawItem.callId), u(this, ie).set(r, s);
  }
  toJSON() {
    return {
      context: this.context,
      usage: this.usage,
      approvals: Object.fromEntries(u(this, ie).entries())
    };
  }
}
ie = new WeakMap();
class aa {
  constructor(e) {
    _(this, "state");
    this.state = e;
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during
   * the agent run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return En(this.input, this.newItems);
  }
  /**
   * The new items generated during the agent run. These include things like new messages, tool
   * calls and their outputs, etc.
   *
   * It does not include information about the agents and instead represents the model data.
   *
   * For the output including the agents, use the `newItems` property.
   */
  get output() {
    return En([], this.newItems);
  }
  /**
   * A copy of the original input items.
   */
  get input() {
    return this.state._originalInput;
  }
  /**
   * The run items generated during the agent run. This associates the model data with the agents.
   *
   * For the model data that can be used as inputs for the next agent run, use the `output` property.
   */
  get newItems() {
    return this.state._generatedItems;
  }
  /**
   * The raw LLM responses generated by the model during the agent run.
   */
  get rawResponses() {
    return this.state._modelResponses;
  }
  /**
   * The last response ID generated by the model during the agent run.
   */
  get lastResponseId() {
    const e = this.rawResponses;
    return e && e.length > 0 ? e[e.length - 1].responseId : void 0;
  }
  /**
   * The last agent that was run
   */
  get lastAgent() {
    return this.state._currentAgent;
  }
  /**
   * Guardrail results for the input messages.
   */
  get inputGuardrailResults() {
    return this.state._inputGuardrailResults;
  }
  /**
   * Guardrail results for the final output of the agent.
   */
  get outputGuardrailResults() {
    return this.state._outputGuardrailResults;
  }
  /**
   * Any interruptions that occurred during the agent run for example for tool approvals.
   */
  get interruptions() {
    var e;
    return ((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_interruption" ? this.state._currentStep.data.interruptions : [];
  }
  /**
   * The final output of the agent. If the output type was set to anything other than `text`,
   * this will be parsed either as JSON or using the Zod schema you provided.
   */
  get finalOutput() {
    var e;
    if (((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_final_output")
      return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);
    A.warn("Accessed finalOutput before agent run is completed.");
  }
}
class ds extends aa {
  constructor(e) {
    super(e);
  }
}
var zt, ht, he, Le, qt, Wt, Ht, Yt;
class su extends aa {
  constructor(t = {}) {
    super(t.state);
    /**
     * The current turn number
     */
    _(this, "currentTurn", 0);
    /**
     * The maximum number of turns that can be run
     */
    _(this, "maxTurns");
    b(this, zt, null);
    b(this, ht);
    b(this, he);
    b(this, Le);
    b(this, qt);
    b(this, Wt);
    b(this, Ht);
    b(this, Yt, !1);
    y(this, ht, t.signal), u(this, ht) && u(this, ht).addEventListener("abort", async () => {
      await u(this, Le).cancel();
    }), y(this, Le, new ho({
      start: (r) => {
        y(this, he, r);
      },
      cancel: () => {
        y(this, Yt, !0);
      }
    })), y(this, qt, new Promise((r, s) => {
      y(this, Wt, r), y(this, Ht, s);
    }));
  }
  /**
   * The current agent that is running
   */
  get currentAgent() {
    return this.lastAgent;
  }
  /**
   * @internal
   * Adds an item to the stream of output items
   */
  _addItem(t) {
    var r;
    this.cancelled || (r = u(this, he)) == null || r.enqueue(t);
  }
  /**
   * @internal
   * Indicates that the stream has been completed
   */
  _done() {
    var t;
    !this.cancelled && u(this, he) && (u(this, he).close(), y(this, he, void 0), (t = u(this, Wt)) == null || t.call(this));
  }
  /**
   * @internal
   * Handles an error in the stream loop.
   */
  _raiseError(t) {
    var r;
    !this.cancelled && u(this, he) && (u(this, he).error(t), y(this, he, void 0)), y(this, zt, t), (r = u(this, Ht)) == null || r.call(this, t);
  }
  /**
   * Returns true if the stream has been cancelled.
   */
  get cancelled() {
    return u(this, Yt);
  }
  /**
   * Returns the underlying readable stream.
   * @returns A readable stream of the agent run.
   */
  toStream() {
    return u(this, Le);
  }
  /**
   * Await this promise to ensure that the stream has been completed if you are not consuming the
   * stream directly.
   */
  get completed() {
    return u(this, qt);
  }
  /**
   * Error thrown during the run, if any.
   */
  get error() {
    return u(this, zt);
  }
  toTextStream(t = {}) {
    const r = u(this, Le).pipeThrough(new mo({
      transform(s, a) {
        if (s.type === "raw_model_stream_event" && s.data.type === "output_text_delta") {
          const i = ra.parse(s.data);
          a.enqueue(i.delta);
        }
      }
    }));
    return t.compatibleWithNodeStreams ? fo.fromWeb(r) : r;
  }
  [Symbol.asyncIterator]() {
    return u(this, Le)[Symbol.asyncIterator]();
  }
}
zt = new WeakMap(), ht = new WeakMap(), he = new WeakMap(), Le = new WeakMap(), qt = new WeakMap(), Wt = new WeakMap(), Ht = new WeakMap(), Yt = new WeakMap();
function ls(n) {
  return n.type === "function" ? {
    type: "function",
    name: n.name,
    description: n.description,
    parameters: n.parameters,
    strict: n.strict
  } : n.type === "computer" ? {
    type: "computer",
    name: n.name,
    environment: n.computer.environment,
    dimensions: n.computer.dimensions
  } : {
    type: "hosted_tool",
    name: n.name,
    providerData: n.providerData
  };
}
function ps(n) {
  return {
    toolName: n.toolName,
    toolDescription: n.toolDescription,
    inputJsonSchema: n.inputJsonSchema,
    strictJsonSchema: n.strictJsonSchema
  };
}
class it {
  constructor() {
    _(this, "type", "base_item");
    _(this, "rawItem");
  }
  toJSON() {
    return {
      type: this.type,
      rawItem: this.rawItem
    };
  }
}
class Mn extends it {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "message_output_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
  get content() {
    let t = "";
    for (const r of this.rawItem.content)
      r.type === "output_text" && (t += r.text);
    return t;
  }
}
class At extends it {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class bt extends it {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "output");
    _(this, "type", "tool_call_output_item");
    this.rawItem = t, this.agent = r, this.output = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON(),
      output: Ke(this.output)
    };
  }
}
class Ir extends it {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "reasoning_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Ar extends it {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "handoff_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Cr extends it {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "sourceAgent");
    _(this, "targetAgent");
    _(this, "type", "handoff_output_item");
    this.rawItem = t, this.sourceAgent = r, this.targetAgent = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      sourceAgent: this.sourceAgent.toJSON(),
      targetAgent: this.targetAgent.toJSON()
    };
  }
}
class st extends it {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_approval_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
function ia(n) {
  if (n.type !== "message" || n.role !== "assistant")
    return;
  const e = n.content[n.content.length - 1];
  if (e.type === "output_text")
    return e.text;
}
function au(n) {
  return n.output.length === 0 ? "" : ia(n.output[n.output.length - 1]) || "";
}
class iu {
  /**
   * @param data The raw responses stream events from the LLM.
   */
  constructor(e) {
    _(this, "data");
    /**
     * The type of the event.
     */
    _(this, "type", "raw_model_stream_event");
    this.data = e;
  }
}
class ou {
  /**
   * @param name The name of the event.
   * @param item The item that was created.
   */
  constructor(e, t) {
    _(this, "name");
    _(this, "item");
    _(this, "type", "run_item_stream_event");
    this.name = e, this.item = t;
  }
}
class uu {
  /**
   * @param agent The new agent
   */
  constructor(e) {
    _(this, "agent");
    _(this, "type", "agent_updated_stream_event");
    this.agent = e;
  }
}
function fs(n, e, t, r) {
  const s = [], a = [], i = [], o = [], d = [], p = new Map(r.map((f) => [f.toolName, f])), l = new Map(t.filter((f) => f.type === "function").map((f) => [f.name, f])), h = t.find((f) => f.type === "computer");
  for (const f of n.output) {
    if (f.type === "message")
      f.role === "assistant" && s.push(new Mn(f, e));
    else if (f.type === "hosted_tool_call")
      s.push(new At(f, e)), d.push(f.name);
    else if (f.type === "reasoning")
      s.push(new Ir(f, e));
    else if (f.type === "computer_call") {
      if (s.push(new At(f, e)), d.push("computer_use"), !h)
        throw Dt({
          message: "Model produced computer action without a computer tool.",
          data: {
            agent_name: e.name
          }
        }), new me("Model produced computer action without a computer tool.");
      o.push({
        toolCall: f,
        computer: h
      });
    }
    if (f.type !== "function_call")
      continue;
    d.push(f.name);
    const x = p.get(f.name);
    if (x)
      s.push(new Ar(f, e)), a.push({
        toolCall: f,
        handoff: x
      });
    else {
      const I = l.get(f.name);
      if (!I)
        throw Dt({
          message: `Tool ${f.name} not found in agent ${e.name}.`,
          data: {
            tool_name: f.name,
            agent_name: e.name
          }
        }), new me(`Tool ${f.name} not found in agent ${e.name}.`);
      s.push(new At(f, e)), i.push({
        toolCall: f,
        tool: I
      });
    }
  }
  return {
    newItems: s,
    handoffs: a,
    functions: i,
    computerActions: o,
    toolsUsed: d
  };
}
const cu = ce("type", [
  g({
    type: m("next_step_handoff"),
    newAgent: U()
  }),
  g({
    type: m("next_step_final_output"),
    output: c()
  }),
  g({
    type: m("next_step_run_again")
  }),
  g({
    type: m("next_step_interruption"),
    data: ne(c(), U())
  })
]);
class ye {
  constructor(e, t, r, s, a) {
    _(this, "originalInput");
    _(this, "modelResponse");
    _(this, "preStepItems");
    _(this, "newStepItems");
    _(this, "nextStep");
    this.originalInput = e, this.modelResponse = t, this.preStepItems = r, this.newStepItems = s, this.nextStep = a;
  }
  /**
   * The items generated during the agent run (i.e. everything generated after originalInput)
   */
  get generatedItems() {
    return this.preStepItems.concat(this.newStepItems);
  }
}
function hs(n, e, t) {
  return n.resetToolChoice && e.hasUsedTools(n) ? { ...t, toolChoice: void 0 } : t;
}
async function ms(n, e, t, r, s, a, i) {
  const o = t.filter((x) => !(x instanceof st)), d = t.filter((x) => x instanceof st).map((x) => x.rawItem.callId), p = s.functions.filter((x) => d.includes(x.toolCall.callId)), l = await oa(n, p, a, i), h = l.map((x) => x.runItem), f = await ua(n, l, i);
  return f.isFinalOutput ? (a.emit("agent_end", i._context, n, f.finalOutput), n.emit("agent_end", i._context, f.finalOutput), new ye(e, r, o, h, {
    type: "next_step_final_output",
    output: f.finalOutput
  })) : f.isInterrupted ? new ye(e, r, o, h, {
    type: "next_step_interruption",
    data: {
      interruptions: f.interruptions
    }
  }) : new ye(e, r, o, h, { type: "next_step_run_again" });
}
async function gs(n, e, t, r, s, a, i) {
  const o = t;
  let d = s.newItems;
  const [p, l] = await Promise.all([
    oa(n, s.functions, a, i),
    lu(n, s.computerActions, a, i._context)
  ]);
  if (d = d.concat(p.map((I) => I.runItem)), d = d.concat(l), s.handoffs.length > 0)
    return await pu(n, e, o, d, r, s.handoffs, a, i._context);
  const h = await ua(n, p, i);
  if (h.isFinalOutput)
    return a.emit("agent_end", i._context, n, h.finalOutput), n.emit("agent_end", i._context, h.finalOutput), new ye(e, r, o, d, {
      type: "next_step_final_output",
      output: h.finalOutput
    });
  if (h.isInterrupted)
    return new ye(e, r, o, d, {
      type: "next_step_interruption",
      data: {
        interruptions: h.interruptions
      }
    });
  const f = d.filter((I) => I instanceof Mn), x = f.length > 0 ? ia(f[f.length - 1].rawItem) : void 0;
  if (!x)
    return new ye(e, r, o, d, { type: "next_step_run_again" });
  if (n.outputType === "text")
    return new ye(e, r, o, d, {
      type: "next_step_final_output",
      output: x
    });
  {
    const { parser: I } = _r(n.outputType, "final_output"), [G] = await gr(() => I(x));
    if (G)
      throw Dt({
        message: "Invalid output type",
        data: {
          error: String(G)
        }
      }), new me("Invalid output type");
    return new ye(e, r, o, d, { type: "next_step_final_output", output: x });
  }
}
function Cn(n, e) {
  return {
    type: "function_call_result",
    name: n.name,
    callId: n.callId,
    status: "completed",
    output: {
      type: "text",
      text: Ke(e)
    }
  };
}
async function oa(n, e, t, r) {
  async function s(a) {
    let i = a.toolCall.arguments;
    if (a.tool.parameters && (Qe(a.tool.parameters) ? i = a.tool.parameters.parse(i) : i = JSON.parse(i)), await a.tool.needsApproval(r._context, i, a.toolCall.callId)) {
      const d = r._context.isToolApproved({
        toolName: a.tool.name,
        callId: a.toolCall.callId
      });
      if (d === !1)
        return os(async (p) => {
          const l = "Tool execution was not approved.";
          return p.setError({
            message: l,
            data: {
              tool_name: a.tool.name,
              error: `Tool execution for ${a.toolCall.callId} was manually rejected by user.`
            }
          }), p.spanData.output = l, {
            type: "function_output",
            tool: a.tool,
            output: l,
            runItem: new bt(Cn(a.toolCall, l), n, l)
          };
        }, {
          data: {
            name: a.tool.name
          }
        });
      if (d !== !0)
        return {
          type: "function_approval",
          tool: a.tool,
          runItem: new st(a.toolCall, n)
        };
    }
    return os(async (d) => {
      t.config.traceIncludeSensitiveData && (d.spanData.input = a.toolCall.arguments);
      try {
        t.emit("agent_tool_start", r._context, n, a.tool), n.emit("agent_tool_start", r._context, a.tool);
        const p = await a.tool.invoke(r._context, a.toolCall.arguments), l = Ke(p);
        return t.emit("agent_tool_end", r._context, n, a.tool, l), n.emit("agent_tool_end", r._context, a.tool, l), t.config.traceIncludeSensitiveData && (d.spanData.output = l), {
          type: "function_output",
          tool: a.tool,
          output: p,
          runItem: new bt(Cn(a.toolCall, p), n, p)
        };
      } catch (p) {
        throw d.setError({
          message: "Error running tool",
          data: {
            tool_name: a.tool.name,
            error: String(p)
          }
        }), p;
      }
    }, {
      data: {
        name: a.tool.name
      }
    });
  }
  try {
    return await Promise.all(e.map(s));
  } catch (a) {
    throw new Si(`Failed to run function tools: ${a}`, a, r);
  }
}
async function du(n, e) {
  const t = e.action;
  let r;
  switch (t.type) {
    case "click":
      await n.click(t.x, t.y, t.button);
      break;
    case "double_click":
      await n.doubleClick(t.x, t.y);
      break;
    case "drag":
      await n.drag(t.path.map((s) => [s.x, s.y]));
      break;
    case "keypress":
      await n.keypress(t.keys);
      break;
    case "move":
      await n.move(t.x, t.y);
      break;
    case "screenshot":
      r = await n.screenshot();
      break;
    case "scroll":
      await n.scroll(t.x, t.y, t.scroll_x, t.scroll_y);
      break;
    case "type":
      await n.type(t.text);
      break;
    case "wait":
      await n.wait();
      break;
  }
  if (typeof r < "u" || typeof n.screenshot == "function" && (r = await n.screenshot(), typeof r < "u"))
    return r;
  throw new Error("Computer does not implement screenshot()");
}
async function lu(n, e, t, r, s = void 0) {
  const a = s ?? A, i = [];
  for (const o of e) {
    const d = o.computer.computer, p = o.toolCall;
    t.emit("agent_tool_start", r, n, o.computer), typeof n.emit == "function" && n.emit("agent_tool_start", r, o.computer);
    let l;
    try {
      l = await du(d, p);
    } catch (x) {
      a.error("Failed to execute computer action:", x), l = "";
    }
    t.emit("agent_tool_end", r, n, o.computer, l), typeof n.emit == "function" && n.emit("agent_tool_end", r, o.computer, l);
    const h = l ? `data:image/png;base64,${l}` : "", f = {
      type: "computer_call_result",
      callId: p.callId,
      output: { type: "computer_screenshot", data: h }
    };
    i.push(new bt(f, n, h));
  }
  return i;
}
async function pu(n, e, t, r, s, a, i, o) {
  if (r = [...r], a.length === 0)
    return A.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."), new ye(e, s, t, r, { type: "next_step_run_again" });
  if (a.length > 1) {
    const p = "Multiple handoffs detected, ignorning this one.";
    for (let l = 1; l < a.length; l++)
      r.push(new bt(Cn(a[l].toolCall, p), n, p));
  }
  const d = a[0];
  return No(async (p) => {
    const l = d.handoff, h = await l.onInvokeHandoff(o, d.toolCall.arguments);
    if (p.spanData.to_agent = h.name, a.length > 1) {
      const x = a.map((I) => I.handoff.agentName);
      p.setError({
        message: "Multiple handoffs requested",
        data: {
          requested_agents: x
        }
      });
    }
    r.push(new Cr(Cn(d.toolCall, Ys(h)), n, h)), i.emit("agent_handoff", o, n, h), n.emit("agent_handoff", o, h);
    const f = l.inputFilter ?? i.config.handoffInputFilter;
    if (f) {
      A.debug("Filtering inputs for handoff"), typeof f != "function" && p.setError({
        message: "Invalid input filter",
        data: {
          details: "not callable"
        }
      });
      const x = {
        inputHistory: Array.isArray(e) ? [...e] : e,
        preHandoffItems: [...t],
        newItems: [...r]
      }, I = f(x);
      e = I.inputHistory, t = I.preHandoffItems, r = I.newItems;
    }
    return new ye(e, s, t, r, { type: "next_step_handoff", newAgent: h });
  }, {
    data: {
      from_agent: n.name
    }
  });
}
const un = {
  isFinalOutput: !1,
  isInterrupted: void 0
};
async function ua(n, e, t) {
  if (e.length === 0)
    return un;
  const r = e.filter((i) => i.runItem instanceof st).map((i) => i.runItem);
  if (r.length > 0)
    return {
      isFinalOutput: !1,
      isInterrupted: !0,
      interruptions: r
    };
  if (n.toolUseBehavior === "run_llm_again")
    return un;
  const s = e[0];
  if (n.toolUseBehavior === "stop_on_first_tool")
    return (s == null ? void 0 : s.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: Ke(s.output)
    } : un;
  const a = n.toolUseBehavior;
  if (typeof a == "object") {
    const i = e.find((o) => a.stopAtToolNames.includes(o.tool.name));
    return (i == null ? void 0 : i.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: Ke(i.output)
    } : un;
  }
  if (typeof a == "function")
    return a(t._context, e);
  throw new Y(`Invalid toolUseBehavior: ${a}`, t);
}
function _s(n, e) {
  for (const t of e.newStepItems) {
    let r;
    if (t instanceof Mn)
      r = "message_output_created";
    else if (t instanceof Ar)
      r = "handoff_requested";
    else if (t instanceof Cr)
      r = "handoff_occurred";
    else if (t instanceof At)
      r = "tool_called";
    else if (t instanceof bt)
      r = "tool_output";
    else if (t instanceof Ir)
      r = "reasoning_item_created";
    else if (t instanceof st)
      r = "tool_approval_requested";
    else {
      A.warn("Unknown item type: ", t);
      continue;
    }
    n._addItem(new ou(r, t));
  }
}
var mt;
class ys {
  constructor() {
    b(this, mt, /* @__PURE__ */ new Map());
  }
  addToolUse(e, t) {
    u(this, mt).set(e, t);
  }
  hasUsedTools(e) {
    return u(this, mt).has(e);
  }
  toJSON() {
    return Object.fromEntries(Array.from(u(this, mt).entries()).map(([e, t]) => [e.name, t]));
  }
}
mt = new WeakMap();
const dn = "1.0", fu = m(dn), _e = g({
  name: c()
}), hu = g({
  object: m("trace.span"),
  id: c(),
  trace_id: c(),
  parent_id: c().nullable(),
  started_at: c().nullable(),
  ended_at: c().nullable(),
  error: g({
    message: c(),
    data: ne(c(), U()).optional()
  }).nullable(),
  span_data: ne(c(), U())
}), ca = hu.extend({
  previous_span: ao(() => ca).optional()
}), da = g({
  requests: T(),
  inputTokens: T(),
  outputTokens: T(),
  totalTokens: T()
}), vs = g({
  usage: da,
  output: J(Tr),
  responseId: c().optional()
}), la = ce("type", [
  g({
    type: m("message_output_item"),
    rawItem: Pn,
    agent: _e
  }),
  g({
    type: m("tool_call_item"),
    rawItem: Ko.or(jn),
    agent: _e
  }),
  g({
    type: m("tool_call_output_item"),
    rawItem: dr,
    agent: _e,
    output: c()
  }),
  g({
    type: m("reasoning_item"),
    rawItem: kr,
    agent: _e
  }),
  g({
    type: m("handoff_call_item"),
    rawItem: Zt,
    agent: _e
  }),
  g({
    type: m("handoff_output_item"),
    rawItem: dr,
    sourceAgent: _e,
    targetAgent: _e
  }),
  g({
    type: m("tool_approval_item"),
    rawItem: Zt,
    agent: _e
  })
]), mu = g({
  object: m("trace"),
  id: c(),
  workflow_name: c(),
  group_id: c().nullable(),
  metadata: ne(c(), U())
}), gu = g({
  newItems: J(la),
  toolsUsed: J(c()),
  handoffs: J(g({
    toolCall: U(),
    handoff: U()
  })),
  functions: J(g({
    toolCall: U(),
    tool: U()
  })),
  computerActions: J(g({
    toolCall: U(),
    computer: U()
  }))
}), pa = g({
  tripwireTriggered: It(),
  outputInfo: U()
}), _u = g({
  guardrail: g({
    type: m("input"),
    name: c()
  }),
  output: pa
}), yu = g({
  guardrail: g({
    type: m("output"),
    name: c()
  }),
  agentOutput: U(),
  agent: _e,
  output: pa
}), ws = g({
  $schemaVersion: fu,
  currentTurn: T(),
  currentAgent: _e,
  originalInput: c().or(J(eu)),
  modelResponses: J(vs),
  context: g({
    usage: da,
    approvals: ne(c(), g({
      approved: J(c()).or(It()),
      rejected: J(c()).or(It())
    })),
    context: ne(c(), U())
  }),
  toolUseTracker: ne(c(), J(c())),
  maxTurns: T(),
  currentAgentSpan: ca.nullable().optional(),
  noActiveAgentRun: It(),
  inputGuardrailResults: J(_u),
  outputGuardrailResults: J(yu),
  currentStep: cu.optional(),
  lastModelResponse: vs.optional(),
  generatedItems: J(la),
  lastProcessedResponse: gu.optional(),
  trace: mu.nullable()
});
class Ge {
  constructor(e, t, r, s) {
    /**
     * Current turn number in the conversation.
     */
    _(this, "_currentTurn", 0);
    /**
     * The agent currently handling the conversation.
     */
    _(this, "_currentAgent");
    /**
     * Original user input prior to any processing.
     */
    _(this, "_originalInput");
    /**
     * Responses from the model so far.
     */
    _(this, "_modelResponses");
    /**
     * Active tracing span for the current agent if tracing is enabled.
     */
    _(this, "_currentAgentSpan");
    /**
     * Run context tracking approvals, usage, and other metadata.
     */
    _(this, "_context");
    /**
     * Tracks what tools each agent has used.
     */
    _(this, "_toolUseTracker");
    /**
     * Items generated by the agent during the run.
     */
    _(this, "_generatedItems");
    /**
     * Maximum allowed turns before forcing termination.
     */
    _(this, "_maxTurns");
    /**
     * Whether the run has an active agent step in progress.
     */
    _(this, "_noActiveAgentRun", !0);
    /**
     * Last model response for the previous turn.
     */
    _(this, "_lastTurnResponse");
    /**
     * Results from input guardrails applied to the run.
     */
    _(this, "_inputGuardrailResults");
    /**
     * Results from output guardrails applied to the run.
     */
    _(this, "_outputGuardrailResults");
    /**
     * Next step computed for the agent to take.
     */
    _(this, "_currentStep");
    /**
     * Parsed model response after applying guardrails and tools.
     */
    _(this, "_lastProcessedResponse");
    /**
     * Trace associated with this run if tracing is enabled.
     */
    _(this, "_trace", null);
    this._context = e, this._originalInput = structuredClone(t), this._modelResponses = [], this._currentAgentSpan = void 0, this._currentAgent = r, this._toolUseTracker = new ys(), this._generatedItems = [], this._maxTurns = s, this._inputGuardrailResults = [], this._outputGuardrailResults = [], this._trace = Nt();
  }
  /**
   * Approves a tool call requested by the agent through an interruption and approval item request.
   *
   * To approve the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only approve the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysApprove` option to `true`.
   *
   * @param approvalItem - The tool call approval item to approve.
   * @param options - Options for the approval.
   */
  approve(e, t = { alwaysApprove: !1 }) {
    this._context.approveTool(e, t);
  }
  /**
   * Rejects a tool call requested by the agent through an interruption and approval item request.
   *
   * To reject the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only reject the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysReject` option to `true`.
   *
   * @param approvalItem - The tool call approval item to reject.
   * @param options - Options for the rejection.
   */
  reject(e, t = { alwaysReject: !1 }) {
    this._context.rejectTool(e, t);
  }
  /**
   * Serializes the run state to a JSON object.
   *
   * This method is used to serialize the run state to a JSON object that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toJSON() {
    var r;
    const e = {
      $schemaVersion: dn,
      currentTurn: this._currentTurn,
      currentAgent: {
        name: this._currentAgent.name
      },
      originalInput: this._originalInput,
      modelResponses: this._modelResponses.map((s) => ({
        usage: {
          requests: s.usage.requests,
          inputTokens: s.usage.inputTokens,
          outputTokens: s.usage.outputTokens,
          totalTokens: s.usage.totalTokens
        },
        output: s.output,
        responseId: s.responseId
      })),
      context: this._context.toJSON(),
      toolUseTracker: this._toolUseTracker.toJSON(),
      maxTurns: this._maxTurns,
      currentAgentSpan: (r = this._currentAgentSpan) == null ? void 0 : r.toJSON(),
      noActiveAgentRun: this._noActiveAgentRun,
      inputGuardrailResults: this._inputGuardrailResults,
      outputGuardrailResults: this._outputGuardrailResults.map((s) => ({
        ...s,
        agent: s.agent.toJSON()
      })),
      currentStep: this._currentStep,
      lastModelResponse: this._lastTurnResponse,
      generatedItems: this._generatedItems.map((s) => s.toJSON()),
      lastProcessedResponse: this._lastProcessedResponse,
      trace: this._trace ? this._trace.toJSON() : null
    }, t = ws.safeParse(e);
    if (!t.success)
      throw new bi(`Failed to serialize run state. ${t.error.message}`);
    return t.data;
  }
  /**
   * Serializes the run state to a string.
   *
   * This method is used to serialize the run state to a string that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
  /**
   * Deserializes a run state from a string.
   *
   * This method is used to deserialize a run state from a string that was serialized using the
   * `toString` method.
   */
  static async fromString(e, t) {
    var h, f, x, I, G;
    const [r, s] = await gr(() => JSON.parse(t));
    if (r)
      throw new Y(`Failed to parse run state. ${r instanceof Error ? r.message : String(r)}`);
    const a = s.$schemaVersion;
    if (!a)
      throw new Y("Run state is missing schema version");
    if (a !== dn)
      throw new Y(`Run state schema version ${a} is not supported. Please use version ${dn}`);
    const i = ws.parse(JSON.parse(t)), o = vu(e), d = new ct(i.context.context);
    d._rebuildApprovals(i.context.approvals);
    const p = o.get(i.currentAgent.name);
    if (!p)
      throw new Y(`Agent ${i.currentAgent.name} not found`);
    const l = new Ge(d, "", p, i.maxTurns);
    l._currentTurn = i.currentTurn, l._toolUseTracker = new ys();
    for (const [Z, L] of Object.entries(i.toolUseTracker))
      l._toolUseTracker.addToolUse(o.get(Z), L);
    if (i.currentAgentSpan) {
      i.trace || A.warn("Trace is not set, skipping tracing setup");
      const Z = be().createTrace({
        traceId: (h = i.trace) == null ? void 0 : h.id,
        name: (f = i.trace) == null ? void 0 : f.workflow_name,
        groupId: ((x = i.trace) == null ? void 0 : x.group_id) ?? void 0,
        metadata: (I = i.trace) == null ? void 0 : I.metadata
      });
      l._currentAgentSpan = fa(Z, i.currentAgentSpan), l._trace = Z;
    }
    return l._noActiveAgentRun = i.noActiveAgentRun, l._inputGuardrailResults = i.inputGuardrailResults, l._outputGuardrailResults = i.outputGuardrailResults.map((Z) => ({
      ...Z,
      agent: o.get(Z.agent.name)
    })), l._currentStep = i.currentStep, l._originalInput = i.originalInput, l._modelResponses = i.modelResponses.map(xs), l._lastTurnResponse = i.lastModelResponse ? xs(i.lastModelResponse) : void 0, l._generatedItems = i.generatedItems.map((Z) => ha(Z, o)), l._lastProcessedResponse = i.lastProcessedResponse ? await wu(o, l._currentAgent, i.lastProcessedResponse) : void 0, ((G = i.currentStep) == null ? void 0 : G.type) === "next_step_handoff" && (l._currentStep = {
      type: "next_step_handoff",
      newAgent: o.get(i.currentStep.newAgent.name)
    }), l;
  }
}
function vu(n) {
  const e = /* @__PURE__ */ new Map(), t = [n];
  for (; t.length > 0; ) {
    const r = t.shift();
    if (!e.has(r.name)) {
      e.set(r.name, r);
      for (const s of r.handoffs)
        s instanceof St ? e.has(s.name) || t.push(s) : s.agent && (e.has(s.agent.name) || t.push(s.agent));
    }
  }
  return e;
}
function fa(n, e) {
  const t = e.span_data, r = e.previous_span ? fa(n, e.previous_span) : void 0, s = be().createSpan({
    spanId: e.id,
    traceId: e.trace_id,
    parentId: e.parent_id ?? void 0,
    startedAt: e.started_at ?? void 0,
    endedAt: e.ended_at ?? void 0,
    data: t
  }, n);
  return s.previousSpan = r, s;
}
function xs(n) {
  const e = new Zn();
  return e.requests = n.usage.requests, e.inputTokens = n.usage.inputTokens, e.outputTokens = n.usage.outputTokens, e.totalTokens = n.usage.totalTokens, {
    usage: e,
    output: n.output.map((t) => Tr.parse(t)),
    responseId: n.responseId
  };
}
function ha(n, e) {
  switch (n.type) {
    case "message_output_item":
      return new Mn(n.rawItem, e.get(n.agent.name));
    case "tool_call_item":
      return new At(n.rawItem, e.get(n.agent.name));
    case "tool_call_output_item":
      return new bt(n.rawItem, e.get(n.agent.name), n.output);
    case "reasoning_item":
      return new Ir(n.rawItem, e.get(n.agent.name));
    case "handoff_call_item":
      return new Ar(n.rawItem, e.get(n.agent.name));
    case "handoff_output_item":
      return new Cr(n.rawItem, e.get(n.sourceAgent.name), e.get(n.targetAgent.name));
    case "tool_approval_item":
      return new st(n.rawItem, e.get(n.agent.name));
  }
}
async function wu(n, e, t) {
  const r = await e.getAllTools(), s = new Map(r.filter((o) => o.type === "function").map((o) => [o.name, o])), a = new Map(r.filter((o) => o.type === "computer").map((o) => [o.name, o])), i = new Map(e.handoffs.map((o) => o instanceof St ? [o.name, Qs(o)] : [o.toolName, o]));
  return {
    newItems: t.newItems.map((o) => ha(o, n)),
    toolsUsed: t.toolsUsed,
    handoffs: t.handoffs.map((o) => {
      if (!i.has(o.handoff.toolName))
        throw new Y(`Handoff ${o.handoff.toolName} not found`);
      return {
        toolCall: o.toolCall,
        handoff: i.get(o.handoff.toolName)
      };
    }),
    functions: await Promise.all(t.functions.map(async (o) => {
      if (!s.has(o.tool.name))
        throw new Y(`Tool ${o.tool.name} not found`);
      return {
        toolCall: o.toolCall,
        tool: s.get(o.tool.name)
      };
    })),
    computerActions: t.computerActions.map((o) => {
      const d = o.computer.name;
      if (!a.has(d))
        throw new Y(`Computer tool ${d} not found`);
      return {
        toolCall: o.toolCall,
        computer: a.get(d)
      };
    })
  };
}
const bs = 10;
function Ss(n, e) {
  return n ? !1 : e ? !0 : "enabled_without_data";
}
function En(n, e) {
  const t = e.map((r) => r.rawItem);
  return typeof n == "string" && (n = [{ type: "message", role: "user", content: n }]), [...n, ...t];
}
var ee, lr, pr, fr, ma, hr;
class xu extends Mo {
  constructor(t = {}) {
    super();
    b(this, ee);
    _(this, "config");
    _(this, "inputGuardrailDefs");
    _(this, "outputGuardrailDefs");
    this.config = {
      modelProvider: t.modelProvider ?? Lo(),
      model: t.model,
      modelSettings: t.modelSettings,
      handoffInputFilter: t.handoffInputFilter,
      inputGuardrails: t.inputGuardrails,
      outputGuardrails: t.outputGuardrails,
      tracingDisabled: t.tracingDisabled ?? !1,
      traceIncludeSensitiveData: t.traceIncludeSensitiveData ?? !0,
      workflowName: t.workflowName ?? "Agent workflow",
      traceId: t.traceId,
      groupId: t.groupId,
      traceMetadata: t.traceMetadata
    }, this.inputGuardrailDefs = (t.inputGuardrails ?? []).map(cs), this.outputGuardrailDefs = (t.outputGuardrails ?? []).map(cr);
  }
  run(t, r, s = {
    stream: !1,
    context: void 0
  }) {
    return r instanceof Ge && r._trace ? vo(r._trace, async () => (r._currentAgentSpan && cn(r._currentAgentSpan), s != null && s.stream ? j(this, ee, hr).call(this, t, r, s) : j(this, ee, lr).call(this, t, r, s))) : wo(async () => s != null && s.stream ? j(this, ee, hr).call(this, t, r, s) : j(this, ee, lr).call(this, t, r, s));
  }
}
ee = new WeakSet(), lr = async function(t, r, s) {
  return or(async () => {
    var i, o;
    const a = r instanceof Ge ? r : new Ge(s.context instanceof ct ? s.context : new ct(s.context), r, t, s.maxTurns ?? bs);
    try {
      for (; ; ) {
        let d = a._currentAgent.model ?? this.config.model;
        if (typeof d == "string" && (d = await this.config.modelProvider.getModel(d)), a._currentStep = a._currentStep ?? {
          type: "next_step_run_again"
        }, a._currentStep.type === "next_step_interruption") {
          if (A.debug("Continuing from interruption"), !a._lastTurnResponse || !a._lastProcessedResponse)
            throw new Y("No model response found in previous state", a);
          const p = await ms(a._currentAgent, a._originalInput, a._generatedItems, a._lastTurnResponse, a._lastProcessedResponse, this, a);
          a._toolUseTracker.addToolUse(a._currentAgent, a._lastProcessedResponse.toolsUsed), a._originalInput = p.originalInput, a._generatedItems = p.generatedItems, a._currentStep = p.nextStep;
          continue;
        }
        if (a._currentStep.type === "next_step_run_again") {
          const p = a._currentAgent.handoffs.map(An);
          if (!a._currentAgentSpan) {
            const L = p.map((Q) => Q.agentName);
            a._currentAgentSpan = is({
              data: {
                name: a._currentAgent.name,
                handoffs: L,
                output_type: a._currentAgent.outputSchemaName
              }
            }), a._currentAgentSpan.start(), cn(a._currentAgentSpan);
          }
          const l = await a._currentAgent.getAllTools(), h = l.map((L) => ls(L)), f = p.map((L) => ps(L));
          if (a._currentAgentSpan && (a._currentAgentSpan.spanData.tools = l.map((L) => L.name)), a._currentTurn++, a._currentTurn > a._maxTurns)
            throw (i = a._currentAgentSpan) == null || i.setError({
              message: "Max turns exceeded",
              data: { max_turns: a._maxTurns }
            }), new Jr(`Max turns (${a._maxTurns}) exceeded`, a);
          A.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`), a._currentTurn === 1 && await j(this, ee, pr).call(this, a);
          const x = En(a._originalInput, a._generatedItems);
          a._noActiveAgentRun && (a._currentAgent.emit("agent_start", a._context, a._currentAgent), this.emit("agent_start", a._context, a._currentAgent));
          let I = {
            ...this.config.modelSettings,
            ...a._currentAgent.modelSettings
          };
          I = hs(a._currentAgent, a._toolUseTracker, I), a._lastTurnResponse = await d.getResponse({
            systemInstructions: await a._currentAgent.getSystemPrompt(a._context),
            input: x,
            previousResponseId: s.previousResponseId,
            modelSettings: I,
            tools: h,
            outputType: Vr(a._currentAgent.outputType),
            handoffs: f,
            tracing: Ss(this.config.tracingDisabled, this.config.traceIncludeSensitiveData)
          }), a._modelResponses.push(a._lastTurnResponse), a._context.usage.add(a._lastTurnResponse.usage), a._noActiveAgentRun = !1;
          const G = fs(a._lastTurnResponse, a._currentAgent, l, p);
          a._lastProcessedResponse = G;
          const Z = await gs(a._currentAgent, a._originalInput, a._generatedItems, a._lastTurnResponse, a._lastProcessedResponse, this, a);
          a._toolUseTracker.addToolUse(a._currentAgent, a._lastProcessedResponse.toolsUsed), a._originalInput = Z.originalInput, a._generatedItems = Z.generatedItems, a._currentStep = Z.nextStep;
        }
        if (a._currentStep && a._currentStep.type === "next_step_final_output")
          return await j(this, ee, fr).call(this, a, a._currentStep.output), this.emit("agent_end", a._context, a._currentAgent, a._currentStep.output), a._currentAgent.emit("agent_end", a._context, a._currentStep.output), new ds(a);
        if (a._currentStep && a._currentStep.type === "next_step_handoff")
          a._currentAgent = a._currentStep.newAgent, a._currentAgentSpan && (a._currentAgentSpan.end(), Tt(), a._currentAgentSpan = void 0), a._noActiveAgentRun = !0, a._currentStep = { type: "next_step_run_again" };
        else {
          if (a._currentStep && a._currentStep.type === "next_step_interruption")
            return new ds(a);
          A.debug("Running next loop");
        }
      }
    } catch (d) {
      throw a._currentAgentSpan && a._currentAgentSpan.setError({
        message: "Error in agent run",
        data: { error: String(d) }
      }), d;
    } finally {
      a._currentAgentSpan && (((o = a._currentStep) == null ? void 0 : o.type) !== "next_step_interruption" && a._currentAgentSpan.end(), Tt());
    }
  });
}, pr = async function(t) {
  const r = this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(cs));
  if (r.length > 0) {
    const s = {
      agent: t._currentAgent,
      input: t._originalInput,
      context: t._context
    };
    try {
      const a = await Promise.all(r.map(async (i) => us(async (o) => {
        const d = await i.run(s);
        return o.spanData.triggered = d.output.tripwireTriggered, d;
      }, { data: { name: i.name } }, t._currentAgentSpan)));
      for (const i of a)
        if (i.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: i.guardrail.name }
          }), new Gr(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`, i, t);
    } catch (a) {
      throw a instanceof Gr ? a : (t._currentTurn--, new Br(`Input guardrail failed to complete: ${a}`, a, t));
    }
  }
}, fr = async function(t, r) {
  const s = this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(cr));
  if (s.length > 0) {
    const a = t._currentAgent.processFinalOutput(r), i = {
      agent: t._currentAgent,
      agentOutput: a,
      context: t._context
    };
    try {
      const o = await Promise.all(s.map(async (d) => us(async (p) => {
        const l = await d.run(i);
        return p.spanData.triggered = l.output.tripwireTriggered, l;
      }, { data: { name: d.name } }, t._currentAgentSpan)));
      for (const d of o)
        if (d.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: d.guardrail.name }
          }), new Xn(`Output guardrail triggered: ${JSON.stringify(d.output.outputInfo)}`, d, t);
    } catch (o) {
      throw o instanceof Xn ? o : new Br(`Output guardrail failed to complete: ${o}`, o, t);
    }
  }
}, ma = async function(t, r) {
  var s, a, i;
  try {
    for (; ; ) {
      const o = t.state._currentAgent, d = o.handoffs.map(An), p = await o.getAllTools(), l = p.map((f) => ls(f)), h = d.map((f) => ps(f));
      if (t.state._currentStep = t.state._currentStep ?? {
        type: "next_step_run_again"
      }, t.state._currentStep.type === "next_step_interruption") {
        if (A.debug("Continuing from interruption"), !t.state._lastTurnResponse || !t.state._lastProcessedResponse)
          throw new Y("No model response found in previous state", t.state);
        const f = await ms(t.state._currentAgent, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        _s(t, f), t.state._toolUseTracker.addToolUse(t.state._currentAgent, t.state._lastProcessedResponse.toolsUsed), t.state._originalInput = f.originalInput, t.state._generatedItems = f.generatedItems, t.state._currentStep = f.nextStep;
        continue;
      }
      if (t.state._currentStep.type === "next_step_run_again") {
        if (!t.state._currentAgentSpan) {
          const Q = d.map((ae) => ae.agentName);
          t.state._currentAgentSpan = is({
            data: {
              name: o.name,
              handoffs: Q,
              tools: p.map((ae) => ae.name),
              output_type: o.outputSchemaName
            }
          }), t.state._currentAgentSpan.start(), cn(t.state._currentAgentSpan);
        }
        if (t.state._currentTurn++, t.state._currentTurn > t.state._maxTurns)
          throw (s = t.state._currentAgentSpan) == null || s.setError({
            message: "Max turns exceeded",
            data: { max_turns: t.state._maxTurns }
          }), new Jr(`Max turns (${t.state._maxTurns}) exceeded`, t.state);
        A.debug(`Running agent ${o.name} (turn ${t.state._currentTurn})`);
        let f = o.model ?? this.config.model;
        typeof f == "string" && (f = await this.config.modelProvider.getModel(f)), t.state._currentTurn === 1 && await j(this, ee, pr).call(this, t.state);
        let x = {
          ...this.config.modelSettings,
          ...o.modelSettings
        };
        x = hs(o, t.state._toolUseTracker, x);
        const I = En(t.input, t.newItems);
        t.state._noActiveAgentRun && (o.emit("agent_start", t.state._context, o), this.emit("agent_start", t.state._context, o));
        let G;
        for await (const Q of f.getStreamedResponse({
          systemInstructions: await o.getSystemPrompt(t.state._context),
          input: I,
          previousResponseId: r.previousResponseId,
          modelSettings: x,
          tools: l,
          handoffs: h,
          outputType: Vr(o.outputType),
          tracing: Ss(this.config.tracingDisabled, this.config.traceIncludeSensitiveData)
        })) {
          if (Q.type === "response_done") {
            const ae = sa.parse(Q);
            G = {
              usage: new Zn(ae.response.usage),
              output: ae.response.output,
              responseId: ae.response.id
            };
          }
          if (t.cancelled)
            return;
          t._addItem(new iu(Q));
        }
        if (t.state._noActiveAgentRun = !1, !G)
          throw new me("Model did not procude a final response!", t.state);
        t.state._lastTurnResponse = G, t.state._modelResponses.push(t.state._lastTurnResponse);
        const Z = fs(t.state._lastTurnResponse, o, p, d);
        t.state._lastProcessedResponse = Z;
        const L = await gs(o, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        _s(t, L), t.state._toolUseTracker.addToolUse(o, Z.toolsUsed), t.state._originalInput = L.originalInput, t.state._generatedItems = L.generatedItems, t.state._currentStep = L.nextStep;
      }
      if (t.state._currentStep.type === "next_step_final_output") {
        await j(this, ee, fr).call(this, t.state, t.state._currentStep.output);
        return;
      } else {
        if (t.state._currentStep.type === "next_step_interruption")
          return;
        t.state._currentStep.type === "next_step_handoff" ? (t.state._currentAgent = (a = t.state._currentStep) == null ? void 0 : a.newAgent, t.state._currentAgentSpan && (t.state._currentAgentSpan.end(), Tt()), t.state._currentAgentSpan = void 0, t._addItem(new uu(o)), t.state._noActiveAgentRun = !0, t.state._currentStep = {
          type: "next_step_run_again"
        }) : A.debug("Running next loop");
      }
    }
  } catch (o) {
    throw t.state._currentAgentSpan && t.state._currentAgentSpan.setError({
      message: "Error in agent run",
      data: { error: String(o) }
    }), o;
  } finally {
    t.state._currentAgentSpan && (((i = t.state._currentStep) == null ? void 0 : i.type) !== "next_step_interruption" && t.state._currentAgentSpan.end(), Tt());
  }
}, hr = async function(t, r, s) {
  return s = s ?? {}, or(async () => {
    const a = r instanceof Ge ? r : new Ge(s.context instanceof ct ? s.context : new ct(s.context), r, t, s.maxTurns ?? bs), i = new su({
      signal: s.signal,
      state: a
    });
    return i.maxTurns = s.maxTurns ?? a._maxTurns, j(this, ee, ma).call(this, i, s).then(() => {
      i._done();
    }, (o) => {
      i._raiseError(o);
    }), i;
  });
};
class St extends Zo {
  constructor(t) {
    super();
    _(this, "name");
    _(this, "instructions");
    _(this, "handoffDescription");
    _(this, "handoffs");
    _(this, "model");
    _(this, "modelSettings");
    _(this, "tools");
    _(this, "mcpServers");
    _(this, "inputGuardrails");
    _(this, "outputGuardrails");
    _(this, "outputType", "text");
    _(this, "toolUseBehavior");
    _(this, "resetToolChoice");
    if (typeof t.name != "string" || t.name.trim() === "")
      throw new Y("Agent must have a name.");
    if (this.name = t.name, this.instructions = t.instructions ?? "", this.handoffDescription = t.handoffDescription ?? "", this.handoffs = t.handoffs ?? [], this.model = t.model ?? "", this.modelSettings = t.modelSettings ?? {}, this.tools = t.tools ?? [], this.mcpServers = t.mcpServers ?? [], this.inputGuardrails = t.inputGuardrails ?? [], this.outputGuardrails = t.outputGuardrails ?? [], t.outputType && (this.outputType = t.outputType), this.toolUseBehavior = t.toolUseBehavior ?? "run_llm_again", this.resetToolChoice = t.resetToolChoice ?? !0, (t.handoffOutputTypeWarningEnabled === void 0 || t.handoffOutputTypeWarningEnabled) && this.handoffs && this.outputType) {
      const r = /* @__PURE__ */ new Set([JSON.stringify(this.outputType)]);
      for (const s of this.handoffs)
        "outputType" in s && s.outputType ? r.add(JSON.stringify(s.outputType)) : "agent" in s && s.agent.outputType && r.add(JSON.stringify(s.agent.outputType));
      r.size > 1 && A.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`);
    }
  }
  /**
   * Create an Agent with handoffs and automatically infer the union type for TOutput from the handoff agents' output types.
   */
  static create(t) {
    return new St({
      ...t,
      handoffs: t.handoffs,
      outputType: t.outputType,
      handoffOutputTypeWarningEnabled: !1
    });
  }
  /**
   * Ouput schema name
   */
  get outputSchemaName() {
    if (this.outputType === "text")
      return "text";
    if (Qe(this.outputType))
      return "ZodOutput";
    if (typeof this.outputType == "object")
      return this.outputType.name;
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Makes a copy of the agent, with the given arguments changed. For example, you could do:
   *
   * ```
   * const newAgent = agent.clone({ instructions: 'New instructions' })
   * ```
   *
   * @param config - A partial configuration to change.
   * @returns A new agent with the given changes.
   */
  clone(t) {
    return new St({
      ...this,
      ...t
    });
  }
  /**
   * Transform this agent into a tool, callable by other agents.
   *
   * This is different from handoffs in two ways:
   * 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent
   *    receives generated input.
   * 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is
   *    called as a tool, and the conversation is continued by the original agent.
   *
   * @param options - Options for the tool.
   * @returns A tool that runs the agent and returns the output text.
   */
  asTool(t) {
    const { toolName: r, toolDescription: s, customOutputExtractor: a } = t;
    return Kn({
      name: r ?? mn(this.name),
      description: s ?? "",
      parameters: {
        type: "object",
        properties: {
          input: {
            type: "string"
          }
        },
        required: ["input"],
        additionalProperties: !1
      },
      strict: !0,
      execute: async (i, o) => {
        if (!ki(i))
          throw new me("Agent tool called with invalid input");
        const p = await new xu().run(this, i.input, {
          context: o == null ? void 0 : o.context
        });
        return typeof a == "function" ? a(p) : au(p.rawResponses[p.rawResponses.length - 1]);
      }
    });
  }
  /**
   * Returns the system prompt for the agent.
   *
   * If the agent has a function as its instructions, this function will be called with the
   * runContext and the agent instance.
   */
  async getSystemPrompt(t) {
    return typeof this.instructions == "function" ? await this.instructions(t, this) : this.instructions;
  }
  /**
   * Fetches the available tools from the MCP servers.
   * @returns the MCP powered tools
   */
  async getMcpTools() {
    return this.mcpServers.length > 0 ? uo(this.mcpServers) : [];
  }
  /**
   * ALl agent tools, including the MCPl and function tools.
   *
   * @returns all configured tools
   */
  async getAllTools() {
    return [...await this.getMcpTools(), ...this.tools];
  }
  /**
   * Processes the final output of the agent.
   *
   * @param output - The output of the agent.
   * @returns The parsed out.
   */
  processFinalOutput(t) {
    if (this.outputType === "text")
      return t;
    if (typeof this.outputType == "object") {
      const r = JSON.parse(t);
      return Qe(this.outputType) ? this.outputType.parse(r) : r;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Returns a JSON representation of the agent, which is serializable.
   *
   * @returns A JSON object containing the agent's name.
   */
  toJSON() {
    return {
      name: this.name
    };
  }
}
jo(qs());
class kc extends St {
  constructor(t) {
    super(t);
    /**
     * The voice intended to be used by the agent. If another agent already spoke during the
     * RealtimeSession, changing the voice during a handoff will fail.
     */
    _(this, "voice");
    this.voice = t.voice ?? "ash";
  }
}
function bu(n) {
  return {
    debounceTextLength: n.debounceTextLength ?? 100
  };
}
function Su({ policyHint: n, ...e }) {
  const t = cr(e), r = n ?? t.name;
  return {
    ...t,
    policyHint: r,
    run: async (s) => {
      const a = await t.run(s);
      return {
        ...a,
        guardrail: { ...a.guardrail, policyHint: r }
      };
    }
  };
}
function ku(n) {
  return `
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo ?? {})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim();
}
const Te = $s("openai-agents:realtime");
g({
  itemId: c()
});
const ks = ce("role", [
  g({
    itemId: c(),
    previousItemId: c().nullable().optional(),
    type: m("message"),
    role: m("system"),
    content: J(g({ type: m("input_text"), text: c() }))
  }),
  g({
    itemId: c(),
    previousItemId: c().nullable().optional(),
    type: m("message"),
    role: m("user"),
    status: re(["in_progress", "completed"]),
    content: J(g({ type: m("input_text"), text: c() }).or(g({
      type: m("input_audio"),
      audio: c().nullable().optional(),
      transcript: c().nullable()
    })))
  }),
  g({
    itemId: c(),
    previousItemId: c().nullable().optional(),
    type: m("message"),
    role: m("assistant"),
    status: re(["in_progress", "completed", "incomplete"]),
    content: J(g({ type: m("text"), text: c() }).or(g({
      type: m("audio"),
      audio: c().nullable().optional(),
      transcript: c().nullable().optional()
    })))
  })
]), Ts = g({
  itemId: c(),
  previousItemId: c().nullable().optional(),
  type: m("function_call"),
  status: re(["in_progress", "completed"]),
  arguments: c(),
  name: c(),
  output: c().nullable()
}), ga = g({
  id: c().optional().nullable(),
  conversation_id: c().optional().nullable(),
  max_output_tokens: T().or(m("inf")).optional().nullable(),
  metadata: ne(c(), U()).optional().nullable(),
  modalities: J(c()).optional().nullable(),
  object: m("realtime.response").optional().nullable(),
  output: J(U()).optional().nullable(),
  output_audio_format: c().optional().nullable(),
  status: re(["completed", "incomplete", "failed", "cancelled", "in_progress"]).optional().nullable(),
  status_details: ne(c(), U()).optional().nullable(),
  usage: g({
    input_tokens: T().optional(),
    input_tokens_details: ne(c(), U()).optional().nullable(),
    output_tokens: T().optional(),
    output_tokens_details: ne(c(), U()).optional().nullable()
  }).optional().nullable(),
  voice: c().optional().nullable()
}), Tu = g({
  id: c().optional(),
  audio: c().nullable().optional(),
  text: c().nullable().optional(),
  transcript: c().nullable().optional(),
  type: Bs([
    m("input_text"),
    m("input_audio"),
    m("item_reference"),
    m("text"),
    m("audio")
  ])
}), an = g({
  id: c().optional(),
  arguments: c().optional(),
  call_id: c().optional(),
  content: J(Tu).optional(),
  name: c().optional(),
  object: m("realtime.item").optional(),
  output: c().optional(),
  role: re(["user", "assistant", "system"]).optional(),
  status: re(["completed", "incomplete", "in_progress"]).optional(),
  type: re(["message", "function_call", "function_call_output"]).optional()
}), Iu = g({
  type: m("conversation.created"),
  event_id: c(),
  conversation: g({
    id: c().optional(),
    object: m("realtime.conversation").optional()
  })
}), Au = g({
  type: m("conversation.item.created"),
  event_id: c(),
  item: an,
  previous_item_id: c().nullable().optional()
}), Cu = g({
  type: m("conversation.item.deleted"),
  event_id: c(),
  item_id: c()
}), Eu = g({
  type: m("conversation.item.input_audio_transcription.completed"),
  event_id: c(),
  item_id: c(),
  content_index: T(),
  transcript: c(),
  logprobs: J(U()).nullable().optional()
}), Ou = g({
  type: m("conversation.item.input_audio_transcription.delta"),
  event_id: c(),
  item_id: c(),
  content_index: T().optional(),
  delta: c().optional(),
  logprobs: J(U()).nullable().optional()
}), Nu = g({
  type: m("conversation.item.input_audio_transcription.failed"),
  event_id: c(),
  item_id: c(),
  content_index: T(),
  error: g({
    code: c().optional(),
    message: c().optional(),
    param: c().optional(),
    type: c().optional()
  })
}), Ru = g({
  type: m("conversation.item.retrieved"),
  event_id: c(),
  item: an
}), Du = g({
  type: m("conversation.item.truncated"),
  event_id: c(),
  item_id: c(),
  audio_end_ms: T(),
  content_index: T()
}), Pu = g({
  type: m("conversation.item.create"),
  item: an,
  event_id: c().optional(),
  previous_item_id: c().nullable().optional()
}), ju = g({
  type: m("conversation.item.delete"),
  item_id: c(),
  event_id: c().optional()
}), Zu = g({
  type: m("conversation.item.retrieve"),
  item_id: c(),
  event_id: c().optional()
}), Mu = g({
  type: m("conversation.item.truncate"),
  item_id: c(),
  audio_end_ms: T(),
  content_index: T(),
  event_id: c().optional()
}), $u = g({
  type: m("error"),
  event_id: c().optional(),
  error: U().optional()
}), Fu = g({
  type: m("input_audio_buffer.cleared"),
  event_id: c()
}), Lu = g({
  type: m("input_audio_buffer.append"),
  audio: c(),
  event_id: c().optional()
}), Uu = g({
  type: m("input_audio_buffer.clear"),
  event_id: c().optional()
}), Ju = g({
  type: m("input_audio_buffer.commit"),
  event_id: c().optional()
}), Bu = g({
  type: m("input_audio_buffer.committed"),
  event_id: c(),
  item_id: c(),
  previous_item_id: c().nullable().optional()
}), Gu = g({
  type: m("input_audio_buffer.speech_started"),
  event_id: c(),
  item_id: c(),
  audio_start_ms: T()
}), Vu = g({
  type: m("input_audio_buffer.speech_stopped"),
  event_id: c(),
  item_id: c(),
  audio_end_ms: T()
}), zu = g({
  type: m("output_audio_buffer.started"),
  event_id: c()
}).passthrough(), qu = g({
  type: m("output_audio_buffer.stopped"),
  event_id: c()
}).passthrough(), Wu = g({
  type: m("output_audio_buffer.cleared"),
  event_id: c()
}), Hu = g({
  type: m("rate_limits.updated"),
  event_id: c(),
  rate_limits: J(g({
    limit: T().optional(),
    name: re(["requests", "tokens"]).optional(),
    remaining: T().optional(),
    reset_seconds: T().optional()
  }))
}), Yu = g({
  type: m("response.audio.delta"),
  event_id: c(),
  item_id: c(),
  content_index: T(),
  delta: c(),
  output_index: T(),
  response_id: c()
}), Xu = g({
  type: m("response.audio.done"),
  event_id: c(),
  item_id: c(),
  content_index: T(),
  output_index: T(),
  response_id: c()
}), Qu = g({
  type: m("response.audio_transcript.delta"),
  event_id: c(),
  item_id: c(),
  content_index: T(),
  delta: c(),
  output_index: T(),
  response_id: c()
}), Ku = g({
  type: m("response.audio_transcript.done"),
  event_id: c(),
  item_id: c(),
  content_index: T(),
  transcript: c(),
  output_index: T(),
  response_id: c()
}), ec = g({
  type: m("response.content_part.added"),
  event_id: c(),
  item_id: c(),
  content_index: T(),
  output_index: T(),
  response_id: c(),
  part: g({
    audio: c().optional(),
    text: c().optional(),
    transcript: c().optional(),
    type: re(["text", "audio"]).optional()
  })
}), tc = g({
  type: m("response.content_part.done"),
  event_id: c(),
  item_id: c(),
  content_index: T(),
  output_index: T(),
  response_id: c(),
  part: g({
    audio: c().optional(),
    text: c().optional(),
    transcript: c().optional(),
    type: re(["text", "audio"]).optional()
  })
}), nc = g({
  type: m("response.created"),
  event_id: c(),
  response: ga
}), _a = g({
  type: m("response.done"),
  event_id: c(),
  response: ga
}), rc = g({
  type: m("response.function_call_arguments.delta"),
  event_id: c(),
  item_id: c(),
  call_id: c(),
  delta: c(),
  output_index: T(),
  response_id: c()
}), sc = g({
  type: m("response.function_call_arguments.done"),
  event_id: c(),
  item_id: c(),
  call_id: c(),
  arguments: c(),
  output_index: T(),
  response_id: c()
}), ac = g({
  type: m("response.output_item.added"),
  event_id: c(),
  item: an,
  output_index: T(),
  response_id: c()
}), ic = g({
  type: m("response.output_item.done"),
  event_id: c(),
  item: an,
  output_index: T(),
  response_id: c()
}), oc = g({
  type: m("response.text.delta"),
  event_id: c(),
  item_id: c(),
  content_index: T(),
  delta: c(),
  output_index: T(),
  response_id: c()
}), uc = g({
  type: m("response.text.done"),
  event_id: c(),
  item_id: c(),
  content_index: T(),
  text: c(),
  output_index: T(),
  response_id: c()
}), cc = g({
  type: m("session.created"),
  event_id: c(),
  session: U()
}), dc = g({
  type: m("session.updated"),
  event_id: c(),
  session: U()
}), lc = g({
  type: m("response.cancel"),
  event_id: c().optional(),
  response_id: c().optional()
}), pc = g({
  type: m("response.create"),
  event_id: c().optional(),
  response: U().optional()
}), fc = g({
  type: m("session.update"),
  event_id: c().optional(),
  session: U()
}), hc = g({
  type: m("transcription_session.update"),
  event_id: c().optional(),
  session: U()
}), mc = g({
  type: m("transcription_session.updated"),
  event_id: c(),
  session: U()
}), gc = g({
  type: c(),
  event_id: c().optional().nullable()
}).passthrough(), _c = ce("type", [
  Iu,
  Au,
  Cu,
  Eu,
  Ou,
  Nu,
  Ru,
  Du,
  $u,
  Fu,
  Bu,
  Gu,
  Vu,
  zu,
  qu,
  Wu,
  Hu,
  Yu,
  Xu,
  Qu,
  Ku,
  ec,
  tc,
  nc,
  _a,
  rc,
  sc,
  ac,
  ic,
  oc,
  uc,
  cc,
  dc,
  mc
]);
ce("type", [
  Pu,
  ju,
  Zu,
  Mu,
  Lu,
  Uu,
  Ju,
  lc,
  pc,
  fc,
  hc
]);
function Er(n) {
  const e = JSON.parse(n.data.toString()), t = _c.safeParse(e);
  if (!t.success) {
    const r = gc.safeParse(e);
    return r.success ? { data: r.data, isGeneric: !0 } : { data: null, isGeneric: !0 };
  }
  return { data: t.data, isGeneric: !1 };
}
const yc = "gpt-4o-realtime-preview", De = {
  voice: "ash",
  modalities: ["text", "audio"],
  inputAudioFormat: "pcm16",
  outputAudioFormat: "pcm16",
  inputAudioTranscription: {
    model: "gpt-4o-mini-transcribe"
  },
  turnDetection: {
    type: "semantic_vad"
  }
};
var qe, Xt, oe;
class ya extends wr {
  constructor(t = {}) {
    super();
    b(this, qe);
    b(this, Xt);
    b(this, oe, null);
    _(this, "eventEmitter", new Rn());
    y(this, qe, t.model ?? yc), y(this, Xt, t.apiKey);
  }
  /**
   * The current model that is being used by the transport layer.
   */
  get currentModel() {
    return u(this, qe);
  }
  /**
   * The current model that is being used by the transport layer.
   * **Note**: The model cannot be changed mid conversation.
   */
  set currentModel(t) {
    y(this, qe, t);
  }
  async _getApiKey(t) {
    const r = t.apiKey ?? u(this, Xt);
    return typeof r == "function" ? await r() : r;
  }
  _onMessage(t) {
    var a, i, o, d, p, l;
    const { data: r, isGeneric: s } = Er(t);
    if (r !== null && (this.emit("*", r), !s)) {
      if (r.type === "error" ? this.emit("error", { type: "error", error: r }) : this.emit(r.type, r), r.type === "response.created") {
        this.emit("turn_started", {
          type: "response_started",
          providerData: {
            ...r
          }
        });
        return;
      }
      if (r.type === "response.done") {
        const h = _a.safeParse(r);
        if (!h.success) {
          Te.error("Error parsing response done event", h.error);
          return;
        }
        const f = ((a = h.data.response.usage) == null ? void 0 : a.input_tokens) ?? 0, x = ((i = h.data.response.usage) == null ? void 0 : i.output_tokens) ?? 0, I = f + x, G = new Zn({
          inputTokens: f,
          inputTokensDetails: ((o = h.data.response.usage) == null ? void 0 : o.input_tokens_details) ?? {},
          outputTokens: x,
          outputTokensDetails: ((d = h.data.response.usage) == null ? void 0 : d.output_tokens_details) ?? {},
          totalTokens: I
        });
        this.emit("usage_update", G), this.emit("turn_done", {
          type: "response_done",
          response: {
            id: h.data.response.id ?? "",
            output: h.data.response.output ?? [],
            usage: {
              inputTokens: f,
              inputTokensDetails: ((p = h.data.response.usage) == null ? void 0 : p.input_tokens_details) ?? {},
              outputTokens: x,
              outputTokensDetails: ((l = h.data.response.usage) == null ? void 0 : l.output_tokens_details) ?? {},
              totalTokens: I
            }
          }
        });
        return;
      }
      if (r.type === "response.audio.done") {
        this.emit("audio_done");
        return;
      }
      if (r.type === "conversation.item.deleted") {
        this.emit("item_deleted", {
          itemId: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.completed" || r.type === "conversation.item.truncated") {
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.delta" || r.type === "response.text.delta" || r.type === "response.audio_transcript.delta" || r.type === "response.function_call_arguments.delta") {
        r.type === "response.audio_transcript.delta" && this.emit("audio_transcript_delta", {
          type: "transcript_delta",
          delta: r.delta,
          itemId: r.item_id,
          responseId: r.response_id
        });
        return;
      }
      if ((r.type === "conversation.item.created" || r.type === "conversation.item.retrieved") && r.item.type === "message") {
        const h = r.type === "conversation.item.created" ? r.previous_item_id : null, f = ks.parse({
          itemId: r.item.id,
          previousItemId: h,
          type: r.item.type,
          role: r.item.role,
          content: r.item.content,
          status: r.item.status
        });
        this.emit("item_update", f);
        return;
      }
      if (r.type === "response.output_item.done" || r.type === "response.output_item.added") {
        const h = r.item;
        if (h.type === "function_call" && h.status === "completed") {
          const f = Ts.parse({
            itemId: h.id,
            type: h.type,
            status: "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: h.arguments,
            name: h.name,
            output: null
          });
          this.emit("item_update", f), this.emit("function_call", {
            id: h.id,
            type: "function_call",
            callId: h.call_id ?? "",
            arguments: h.arguments ?? "",
            name: h.name ?? ""
          });
          return;
        }
        if (h.type === "message") {
          const f = ks.parse({
            itemId: r.item.id,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: "in_progress"
          });
          this.emit("item_update", f);
          return;
        }
      }
    }
  }
  _onError(t) {
    this.emit("error", {
      type: "error",
      error: t
    });
  }
  _onOpen() {
    this.emit("connected");
  }
  _onClose() {
    this.emit("disconnected");
  }
  /**
   * Send a message to the Realtime API. This will create a new item in the conversation and
   * trigger a response.
   *
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r) {
    this.sendEvent({
      type: "conversation.item.create",
      item: typeof t == "string" ? {
        type: "message",
        role: "user",
        content: [
          {
            type: "input_text",
            text: t
          }
        ]
      } : t,
      ...r
    }), this.sendEvent({
      type: "response.create"
    });
  }
  _getMergedSessionConfig(t) {
    var s;
    return {
      instructions: t.instructions,
      model: t.model ?? u(this, qe) ?? De.model,
      voice: t.voice ?? De.voice,
      modalities: t.modalities ?? De.modalities,
      input_audio_format: t.inputAudioFormat ?? De.inputAudioFormat,
      output_audio_format: t.outputAudioFormat ?? De.outputAudioFormat,
      input_audio_transcription: t.inputAudioTranscription ?? De.inputAudioTranscription,
      turn_detection: t.turnDetection ?? De.turnDetection,
      tool_choice: t.toolChoice ?? De.toolChoice,
      tools: (s = t.tools) == null ? void 0 : s.map((a) => ({
        ...a,
        strict: void 0
      })),
      // We don't set tracing here to make sure that we don't try to override it on every
      // session.update as it might lead to errors
      ...t.providerData ?? {}
    };
  }
  /**
   * Sets the internal tracing config. This is used to track the tracing config that has been set
   * during the session.create event.
   */
  set _tracingConfig(t) {
    y(this, oe, t);
  }
  /**
   * Sets the tracing config for the session. This will send the tracing config to the Realtime API.
   *
   * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists
   */
  _updateTracingConfig(t) {
    var r, s, a;
    if (typeof u(this, oe) > "u" && y(this, oe, null), t === "auto") {
      this.sendEvent({
        type: "session.update",
        session: {
          tracing: "auto"
        }
      });
      return;
    }
    if (typeof u(this, oe) != "string" && typeof t != "string") {
      Te.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");
      return;
    }
    if (t === null) {
      Te.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."), this.sendEvent({
        type: "session.update",
        session: {
          tracing: null
        }
      });
      return;
    }
    if (u(this, oe) === null || typeof u(this, oe) == "string") {
      this.sendEvent({
        type: "session.update",
        session: {
          tracing: t
        }
      });
      return;
    }
    if ((t == null ? void 0 : t.group_id) !== ((r = u(this, oe)) == null ? void 0 : r.group_id) || (t == null ? void 0 : t.metadata) !== ((s = u(this, oe)) == null ? void 0 : s.metadata) || (t == null ? void 0 : t.workflow_name) !== ((a = u(this, oe)) == null ? void 0 : a.workflow_name)) {
      Te.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s", JSON.stringify(u(this, oe)), JSON.stringify(t));
      return;
    }
    this.sendEvent({
      type: "session.update",
      session: {
        tracing: t
      }
    });
  }
  /**
   * Updates the session config. This will merge it with the current session config with the default
   * values and send it to the Realtime API.
   *
   * @param config - The session config to update.
   */
  updateSessionConfig(t) {
    const r = this._getMergedSessionConfig(t);
    this.sendEvent({
      type: "session.update",
      session: r
    });
  }
  /**
   * Send the output of a function call to the Realtime API.
   *
   * @param toolCall - The tool call to send the output for.
   * @param output - The output of the function call.
   * @param startResponse - Whether to start a new response after sending the output.
   */
  sendFunctionCallOutput(t, r, s = !0) {
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "function_call_output",
        output: r,
        call_id: t.callId
      }
    });
    try {
      const a = Ts.parse({
        itemId: t.id,
        previousItemId: t.previousItemId,
        type: "function_call",
        status: "completed",
        arguments: t.arguments,
        name: t.name,
        output: r
      });
      this.emit("item_update", a);
    } catch (a) {
      Te.error("Error parsing tool call item", a, t);
    }
    s && this.sendEvent({
      type: "response.create"
    });
  }
  /**
   * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer
   * will be committed and the model will start processing it. This is necessary if you have
   * disabled turn detection / voice activity detection (VAD).
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, { commit: r = !1 } = {}) {
    this.sendEvent({
      type: "input_audio_buffer.append",
      audio: As(t)
    }), r && this.sendEvent({
      type: "input_audio_buffer.commit"
    });
  }
  /**
   * Reset the history of the conversation. This will create a diff between the old and new history
   * and send the necessary events to the Realtime API to update the history.
   *
   * @param oldHistory - The old history of the conversation.
   * @param newHistory - The new history of the conversation.
   */
  resetHistory(t, r) {
    const { removals: s, additions: a, updates: i } = Aa(t, r), o = new Set(s.map((p) => p.itemId));
    for (const p of i)
      o.add(p.itemId);
    if (o.size > 0)
      for (const p of o)
        this.sendEvent({
          type: "conversation.item.delete",
          item_id: p
        });
    const d = [...a, ...i];
    for (const p of d)
      if (p.type === "message") {
        const l = {
          type: "message",
          role: p.role,
          content: p.content,
          id: p.itemId
        };
        p.role !== "system" && p.status && (l.status = p.status), this.sendEvent({
          type: "conversation.item.create",
          item: l
        });
      } else p.type === "function_call" && Te.warn("Function calls cannot be manually added or updated at the moment. Ignoring.");
  }
}
qe = new WeakMap(), Xt = new WeakMap(), oe = new WeakMap();
var Qt, V, Kt, We, en;
class vc extends ya {
  constructor(t = {}) {
    if (typeof RTCPeerConnection > "u")
      throw new Error("WebRTC is not supported in this environment");
    super(t);
    _(this, "options");
    b(this, Qt);
    b(this, V, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0
    });
    b(this, Kt);
    b(this, We, !1);
    b(this, en, !1);
    this.options = t, y(this, Qt, t.baseUrl ?? "https://api.openai.com/v1/realtime"), y(this, Kt, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current status of the WebRTC connection.
   */
  get status() {
    return u(this, V).status;
  }
  /**
   * The current connection state of the WebRTC connection including the peer connection and data
   * channel.
   */
  get connectionState() {
    return u(this, V);
  }
  /**
   * Whether the session is muted.
   */
  get muted() {
    return u(this, en);
  }
  /**
   * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API
   * via WebRTC.
   *
   * If you are using a browser, the transport layer will also automatically configure the
   * microphone and audio output to be used by the session.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    if (u(this, V).status === "connected")
      return;
    u(this, V).status === "connecting" && Te.warn("Realtime connection already in progress. Please await original promise");
    const r = t.model ?? this.currentModel;
    this.currentModel = r;
    const s = t.url ?? u(this, Qt), a = await this._getApiKey(t), i = typeof a == "string" && a.startsWith("ek_");
    if (!u(this, Kt) && !i)
      throw new Y("Using the WebRTC connection in a browser environment requires an insecure API key. Please use a WebSocket connection instead or set the useInsecureApiKey option to true.");
    return new Promise(async (o, d) => {
      try {
        const p = {
          ...t.initialSessionConfig || {},
          model: this.currentModel
        }, l = new URL(s), h = new RTCPeerConnection(), f = h.createDataChannel("oai-events");
        y(this, V, {
          status: "connecting",
          peerConnection: h,
          dataChannel: f
        }), this.emit("connection_change", u(this, V).status), f.addEventListener("open", () => {
          y(this, V, {
            status: "connected",
            peerConnection: h,
            dataChannel: f
          }), this.updateSessionConfig(p), this.emit("connection_change", u(this, V).status), this._onOpen(), o();
        }), f.addEventListener("error", (Se) => {
          this.close(), this._onError(Se), d(Se);
        }), f.addEventListener("message", (Se) => {
          this._onMessage(Se);
          const { data: ge, isGeneric: Rr } = Er(Se);
          !ge || Rr || (ge.type === "response.created" ? y(this, We, !0) : ge.type === "response.done" && y(this, We, !1), ge.type === "session.created" && (this._tracingConfig = ge.session.tracing, this._updateTracingConfig(p.tracing ?? "auto")));
        });
        const x = this.options.audioElement ?? document.createElement("audio");
        x.autoplay = !0, h.ontrack = (Se) => {
          x.srcObject = Se.streams[0];
        };
        const I = this.options.mediaStream ?? await navigator.mediaDevices.getUserMedia({
          audio: !0
        });
        h.addTrack(I.getAudioTracks()[0]);
        const G = await h.createOffer();
        if (await h.setLocalDescription(G), !G.sdp)
          throw new Error("Failed to create offer");
        const Z = {
          ...this._getMergedSessionConfig(p),
          model: this.currentModel
        }, L = new FormData();
        L.append("sdp", G.sdp), L.append("session", JSON.stringify(Z));
        const ae = {
          type: "answer",
          sdp: await (await fetch(l, {
            method: "POST",
            body: L,
            headers: {
              Authorization: `Bearer ${a}`,
              "X-OpenAI-Agents-SDK": Oa["X-OpenAI-Agents-SDK"]
            }
          })).text()
        };
        await h.setRemoteDescription(ae);
      } catch (p) {
        this.close(), this._onError(p), d(p);
      }
    });
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!u(this, V).dataChannel || u(this, V).dataChannel.readyState !== "open")
      throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");
    u(this, V).dataChannel.send(JSON.stringify(t));
  }
  /**
   * Mute or unmute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    y(this, en, t), u(this, V).peerConnection && u(this, V).peerConnection.getSenders().forEach((s) => {
      s.track && (s.track.enabled = !t);
    });
  }
  /**
   * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.
   */
  close() {
    if (u(this, V).dataChannel && u(this, V).dataChannel.close(), u(this, V).peerConnection) {
      const t = u(this, V).peerConnection;
      t.getSenders().forEach((r) => {
        var s;
        (s = r.track) == null || s.stop();
      }), t.close();
    }
    u(this, V).status !== "disconnected" && (y(this, V, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0
    }), this.emit("connection_change", u(this, V).status), this._onClose());
  }
  /**
   * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent
   * stops talking.
   */
  interrupt() {
    u(this, We) && (this.sendEvent({
      type: "response.cancel"
    }), y(this, We, !1)), this.sendEvent({
      type: "output_audio_buffer.clear"
    });
  }
}
Qt = new WeakMap(), V = new WeakMap(), Kt = new WeakMap(), We = new WeakMap(), en = new WeakMap();
const wc = globalThis.WebSocket;
var He, gt, H, tn, Ce, Ye, Xe, Nn, va;
class xc extends ya {
  constructor(t = {}) {
    super(t);
    b(this, Nn);
    b(this, He);
    b(this, gt);
    b(this, H, {
      status: "disconnected",
      websocket: void 0
    });
    b(this, tn);
    b(this, Ce);
    b(this, Ye);
    /**
     * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time
     * since the response started to compute the right interruption time.
     *
     * Mostly internal but might be used by extended transport layers for their interruption
     * calculation.
     */
    _(this, "_firstAudioTimestamp");
    _(this, "_audioLengthMs", 0);
    b(this, Xe, !1);
    y(this, gt, `wss://api.openai.com/v1/realtime?model=${this.currentModel}`), y(this, tn, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current status of the WebSocket connection.
   */
  get status() {
    return u(this, H).status;
  }
  /**
   * The current connection state of the WebSocket connection.
   */
  get connectionState() {
    return u(this, H);
  }
  /**
   * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,
   * this should be handled by the client by not triggering the `sendAudio` method.
   */
  get muted() {
    return null;
  }
  /**
   * The current item ID of the ongoing response.
   */
  get currentItemId() {
    return u(this, Ce);
  }
  /**
   * Triggers the `audio` event that a client might listen to to receive the audio buffer.
   * Protected for you to be able to override and disable emitting this event in case your extended
   * transport layer handles audio internally.
   *
   * @param audioEvent - The audio event to emit.
   */
  _onAudio(t) {
    this.emit("audio", t);
  }
  async connect(t) {
    const r = t.model ?? this.currentModel;
    this.currentModel = r, y(this, He, await this._getApiKey(t)), y(this, gt, t.url ?? `wss://api.openai.com/v1/realtime?model=${this.currentModel}`);
    const s = {
      ...t.initialSessionConfig || {},
      model: this.currentModel
    };
    await new Promise((a, i) => {
      try {
        j(this, Nn, va).call(this, a, i, s);
      } catch (o) {
        i(o);
      }
    }), await this.updateSessionConfig(s);
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!u(this, H).websocket)
      throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");
    u(this, H).websocket.send(JSON.stringify(t));
  }
  /**
   * Close the WebSocket connection.
   *
   * This will also reset any internal connection tracking used for interruption handling.
   */
  close() {
    var t;
    (t = u(this, H).websocket) == null || t.close(), y(this, Ce, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, y(this, Ye, void 0);
  }
  /**
   * Will throw an error as the WebSocket transport layer does not support muting.
   */
  mute(t) {
    throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.");
  }
  /**
   * Send an audio buffer to the Realtime API. This is used for your client to send audio to the
   * model to respond.
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, r = {}) {
    u(this, H).status === "connected" && super.sendAudio(t, r);
  }
  /**
   * Send a cancel response event to the Realtime API. This is used to cancel an ongoing
   *  response that the model is currently generating.
   */
  _cancelResponse() {
    u(this, Xe) && (this.sendEvent({
      type: "response.cancel"
    }), y(this, Xe, !1));
  }
  /**
   * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.
   *
   * This method is used to send the right events to the API to inform the model that the user has
   * interrupted the response. It might be overridden/extended by an extended transport layer. See
   * the `TwilioRealtimeTransportLayer` for an example.
   *
   * @param elapsedTime - The elapsed time since the response started.
   */
  _interrupt(t) {
    this.emit("audio_interrupted"), this.sendEvent({
      type: "conversation.item.truncate",
      item_id: u(this, Ce),
      content_index: u(this, Ye),
      audio_end_ms: t
    });
  }
  /**
   * Interrupt the ongoing response. This method is triggered automatically by the client when
   * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got
   * triggered.
   *
   * You can also call this method directly if you want to interrupt the conversation for example
   * based on an event in the client.
   */
  interrupt() {
    if (!u(this, Ce) || typeof this._firstAudioTimestamp != "number")
      return;
    this._cancelResponse();
    const t = Date.now() - this._firstAudioTimestamp;
    t >= 0 && t < this._audioLengthMs && this._interrupt(t), y(this, Ce, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, y(this, Ye, void 0);
  }
}
He = new WeakMap(), gt = new WeakMap(), H = new WeakMap(), tn = new WeakMap(), Ce = new WeakMap(), Ye = new WeakMap(), Xe = new WeakMap(), Nn = new WeakSet(), va = function(t, r, s) {
  if (u(this, H).websocket) {
    t();
    return;
  }
  if (!u(this, He))
    throw new Y("API key is not set. Please call `connect()` with an API key first.");
  if (!u(this, He).startsWith("ek_") && !u(this, tn))
    throw new Y("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");
  const a = [
    "realtime",
    // Auth
    "openai-insecure-api-key." + u(this, He),
    // Beta protocol, required
    "openai-beta.realtime-v1",
    // Version header
    Na
  ], i = new wc(u(this, gt), a);
  y(this, H, {
    status: "connecting",
    websocket: i
  }), this.emit("connection_change", u(this, H).status), i.addEventListener("open", () => {
    y(this, H, {
      status: "connected",
      websocket: i
    }), this.emit("connection_change", u(this, H).status), this._onOpen(), t();
  }), i.addEventListener("error", (o) => {
    this._onError(o), y(this, H, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", u(this, H).status), r(o);
  }), i.addEventListener("message", (o) => {
    this._onMessage(o);
    const { data: d, isGeneric: p } = Er(o);
    if (!(!d || p))
      if (d.type === "response.audio.delta") {
        y(this, Ye, d.content_index), y(this, Ce, d.item_id), this._firstAudioTimestamp === void 0 && (this._firstAudioTimestamp = Date.now(), this._audioLengthMs = 0);
        const l = Is(d.delta);
        this._audioLengthMs += l.byteLength / 24 / 2;
        const h = {
          type: "audio",
          data: l,
          responseId: d.response_id
        };
        this._onAudio(h);
      } else d.type === "input_audio_buffer.speech_started" ? this.interrupt() : d.type === "response.created" ? y(this, Xe, !0) : d.type === "response.done" ? y(this, Xe, !1) : d.type === "session.created" && (this._tracingConfig = d.session.tracing, this._updateTracingConfig(s.tracing ?? "auto"));
  }), i.addEventListener("close", () => {
    y(this, H, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", u(this, H).status), this._onClose();
  });
};
var $, D, nn, R, _t, yt, rn, q, sn, vt, z, ln, pn, wa, fn, xa, mr, ba;
class Tc extends Rn {
  constructor(t, r = {}) {
    super();
    b(this, z);
    _(this, "initialAgent");
    _(this, "options");
    b(this, $);
    b(this, D);
    b(this, nn, []);
    b(this, R);
    b(this, _t, []);
    b(this, yt);
    b(this, rn, {});
    b(this, q, []);
    b(this, sn);
    b(this, vt, {});
    this.initialAgent = t, this.options = r, typeof r.transport > "u" && Ca() || r.transport === "webrtc" ? y(this, $, new vc()) : r.transport === "websocket" || typeof r.transport > "u" ? y(this, $, new xc()) : y(this, $, r.transport), y(this, D, t), y(this, R, new ct({
      ...r.context ?? {},
      history: u(this, q)
    })), y(this, _t, (r.outputGuardrails ?? []).map(Su)), y(this, yt, bu(r.outputGuardrailSettings ?? {})), y(this, sn, r.historyStoreAudio ?? !1);
  }
  /**
   * The transport layer used by the session.
   */
  get transport() {
    return u(this, $);
  }
  /**
   * The current agent in the session.
   */
  get currentAgent() {
    return u(this, D);
  }
  /**
   * The current usage of the session.
   */
  get usage() {
    return u(this, R).usage;
  }
  /**
   * The current context of the session.
   */
  get context() {
    return u(this, R);
  }
  /**
   * Whether the session is muted. Might be `null` if the underlying transport layer does not
   * support muting.
   */
  get muted() {
    return u(this, $).muted;
  }
  /**
   * The history of the session.
   */
  get history() {
    return u(this, q);
  }
  async updateAgent(t) {
    return u(this, D).emit("agent_handoff", u(this, R), t), this.emit("agent_handoff", u(this, R), u(this, D), t), await j(this, z, ln).call(this, t), await u(this, $).updateSessionConfig(await j(this, z, pn).call(this)), t;
  }
  /**
   * Connect to the session. This will establish the connection to the underlying transport layer
   * and start the session.
   *
   * After connecting, the session will also emit a `history_updated` event with an empty history.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    await j(this, z, ln).call(this, this.initialAgent), j(this, z, ba).call(this), await u(this, $).connect({
      apiKey: t.apiKey ?? this.options.apiKey,
      model: this.options.model,
      initialSessionConfig: await j(this, z, pn).call(this, this.options.config)
    }), y(this, q, []), this.emit("history_updated", u(this, q));
  }
  /**
   * Update the history of the session.
   * @param newHistory - The new history to set.
   */
  updateHistory(t) {
    let r;
    typeof t == "function" ? r = t(u(this, q)) : r = t, u(this, $).resetHistory(u(this, q), r);
  }
  /**
   * Send a message to the session.
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r = {}) {
    u(this, $).sendMessage(t, r);
  }
  /**
   * Mute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    u(this, $).mute(t);
  }
  /**
   * Disconnect from the session.
   */
  close() {
    y(this, vt, {}), u(this, $).close();
  }
  /**
   * Send audio to the session.
   * @param audio - The audio to send.
   * @param options - Additional options.
   * @param options.commit - Whether to finish the turn with this audio.
   */
  sendAudio(t, r = {}) {
    u(this, $).sendAudio(t, r);
  }
  /**
   * Interrupt the session artificially for example if you want to build a "stop talking"
   * button.
   */
  interrupt() {
    u(this, $).interrupt();
  }
  /**
   * Approve a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to approve.
   * @param options - Additional options.
   * @param options.alwaysApprove - Whether to always approve the tool call.
   */
  async approve(t, r = { alwaysApprove: !1 }) {
    u(this, R).approveTool(t, r);
    const s = u(this, D).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function")
      await j(this, z, fn).call(this, t.rawItem, s);
    else
      throw new me(`Tool ${t.rawItem.name} not found`);
  }
  /**
   * Reject a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to reject.
   * @param options - Additional options.
   * @param options.alwaysReject - Whether to always reject the tool call.
   */
  async reject(t, r = { alwaysReject: !1 }) {
    u(this, R).rejectTool(t, r);
    const s = u(this, D).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function")
      await j(this, z, fn).call(this, t.rawItem, s);
    else
      throw new me(`Tool ${t.rawItem.name} not found`);
  }
}
$ = new WeakMap(), D = new WeakMap(), nn = new WeakMap(), R = new WeakMap(), _t = new WeakMap(), yt = new WeakMap(), rn = new WeakMap(), q = new WeakMap(), sn = new WeakMap(), vt = new WeakMap(), z = new WeakSet(), ln = async function(t) {
  y(this, D, t);
  const s = u(this, D).handoffs.map(An).map((a) => a.getHandoffAsFunctionTool());
  y(this, nn, [
    ...(await u(this, D).getAllTools()).filter((a) => a.type === "function"),
    ...s
  ]);
}, pn = async function(t = {}) {
  const r = await u(this, D).getSystemPrompt(u(this, R)), s = this.options.tracingDisabled ? null : this.options.workflowName ? {
    workflow_name: this.options.workflowName
  } : "auto";
  return s !== null && s !== "auto" ? (this.options.groupId && (s.group_id = this.options.groupId), this.options.traceMetadata && (s.metadata = this.options.traceMetadata)) : (this.options.groupId || this.options.traceMetadata) && Te.warn("In order to set traceMetadata or a groupId you need to specify a workflowName."), {
    instructions: r,
    voice: u(this, D).voice,
    model: this.options.model,
    tools: u(this, nn),
    tracing: s,
    ...t
  };
}, wa = async function(t, r) {
  const s = await r.onInvokeHandoff(u(this, R), t.arguments);
  u(this, D).emit("agent_handoff", u(this, R), s), this.emit("agent_handoff", u(this, R), u(this, D), s), await j(this, z, ln).call(this, s), await u(this, $).updateSessionConfig(await j(this, z, pn).call(this));
  const a = Ys(s);
  return u(this, $).sendFunctionCallOutput(t, a, !0), s;
}, fn = async function(t, r) {
  u(this, R).context.history = JSON.parse(JSON.stringify(u(this, q)));
  let s = t.arguments;
  if (r.parameters && (Qe(r.parameters) ? s = r.parameters.parse(s) : s = JSON.parse(s)), await r.needsApproval(u(this, R), s, t.callId)) {
    const d = this.context.isToolApproved({
      toolName: r.name,
      callId: t.callId
    });
    if (d === !1) {
      this.emit("agent_tool_start", u(this, R), u(this, D), r), u(this, D).emit("agent_tool_start", u(this, R), r);
      const p = "Tool execution was not approved.";
      u(this, $).sendFunctionCallOutput(t, p, !0), this.emit("agent_tool_end", u(this, R), u(this, D), r, p), u(this, D).emit("agent_tool_end", u(this, R), r, p);
      return;
    } else if (typeof d > "u") {
      this.emit("tool_approval_requested", u(this, R), u(this, D), {
        type: "function_approval",
        tool: r,
        approvalItem: new st(t, u(this, D))
      });
      return;
    }
  }
  this.emit("agent_tool_start", u(this, R), u(this, D), r), u(this, D).emit("agent_tool_start", u(this, R), r), u(this, R).context.history = JSON.parse(JSON.stringify(u(this, q)));
  const i = await r.invoke(u(this, R), t.arguments), o = Ke(i);
  u(this, $).sendFunctionCallOutput(t, o, !0), this.emit("agent_tool_end", u(this, R), u(this, D), r, o), u(this, D).emit("agent_tool_end", u(this, R), r, o);
}, xa = async function(t) {
  const r = new Map(u(this, D).handoffs.map(An).map((i) => [i.toolName, i])), s = new Map((await u(this, D).getAllTools()).map((i) => [i.name, i])), a = r.get(t.name);
  if (a)
    await j(this, z, wa).call(this, t, a);
  else {
    const i = s.get(t.name);
    if (i && i.type === "function")
      await j(this, z, fn).call(this, t, i);
    else
      throw new me(`Tool ${t.name} not found`);
  }
}, mr = async function(t, r) {
  if (u(this, _t).length === 0)
    return;
  const s = {
    agent: u(this, D),
    agentOutput: t,
    context: u(this, R)
  }, i = (await Promise.all(u(this, _t).map((o) => o.run(s)))).find((o) => o.output.tripwireTriggered);
  if (i) {
    if (u(this, vt)[r])
      return;
    u(this, vt)[r] = !0;
    const o = new Xn(`Output guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`, i);
    this.emit("guardrail_tripped", u(this, R), u(this, D), o), this.interrupt();
    const d = ku(i);
    this.sendMessage(d);
    return;
  }
}, ba = function() {
  u(this, $).on("*", (s) => {
    this.emit("transport_event", s);
  }), u(this, $).on("audio", (s) => {
    this.emit("audio", s);
  }), u(this, $).on("turn_started", () => {
    this.emit("agent_start", u(this, R), u(this, D)), u(this, D).emit("agent_start", u(this, R), u(this, D));
  }), u(this, $).on("turn_done", (s) => {
    const a = s.response.output[s.response.output.length - 1], i = Cs(a) ?? "";
    this.emit("agent_end", u(this, R), u(this, D), i), u(this, D).emit("agent_end", u(this, R), i), j(this, z, mr).call(this, i, s.response.id);
  }), u(this, $).on("audio_done", () => {
    this.emit("audio_stopped", u(this, R), u(this, D));
  });
  let t = 0, r;
  u(this, $).on("audio_transcript_delta", (s) => {
    try {
      const a = s.delta, i = s.itemId, o = s.responseId;
      r !== i && (r = i, t = 0);
      const p = (u(this, rn)[i] ?? "") + a;
      if (u(this, rn)[i] = p, u(this, yt).debounceTextLength < 0)
        return;
      const l = Math.floor(p.length / u(this, yt).debounceTextLength);
      l > t && (t = l, j(this, z, mr).call(this, p, o));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, $).on("item_update", (s) => {
    try {
      const a = !u(this, q).some((i) => i.itemId === s.itemId);
      if (y(this, q, Ea(u(this, q), s, u(this, sn))), u(this, R).context.history = u(this, q), a) {
        const i = u(this, q).find((o) => o.itemId === s.itemId);
        i && this.emit("history_added", i);
      }
      this.emit("history_updated", u(this, q));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, $).on("item_deleted", (s) => {
    try {
      y(this, q, u(this, q).filter((a) => a.itemId !== s.itemId)), u(this, R).context.history = u(this, q), this.emit("history_updated", u(this, q));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, $).on("function_call", async (s) => {
    try {
      await j(this, z, xa).call(this, s);
    } catch (a) {
      Te.error("Error handling function call", a), this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), u(this, $).on("usage_update", (s) => {
    u(this, R).usage.add(s);
  }), u(this, $).on("audio_interrupted", () => {
    this.emit("audio_interrupted", u(this, R), u(this, D));
  }), u(this, $).on("error", (s) => {
    this.emit("error", s);
  });
};
const Ic = {
  base64ToArrayBuffer: Is,
  arrayBufferToBase64: As,
  getLastTextFromAudioOutputMessage: Cs
};
export {
  yc as DEFAULT_OPENAI_REALTIME_MODEL,
  De as DEFAULT_OPENAI_REALTIME_SESSION_CONFIG,
  me as ModelBehaviorError,
  ya as OpenAIRealtimeBase,
  vc as OpenAIRealtimeWebRTC,
  xc as OpenAIRealtimeWebSocket,
  Xn as OutputGuardrailTripwireTriggered,
  kc as RealtimeAgent,
  Tc as RealtimeSession,
  Y as UserError,
  Kn as tool,
  Ic as utils
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
